<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seoulauction.renewal.mapper.kt.AuctionOnlineMapper">
    <select id="selectSaleInfoList" parameterType="CommonMap" resultType="CommonMap">
        select S.SALE_NO
             , S.SALE_KIND_CD
             , IF(S.SALE_TH_DSP_YN = 'N', '', S.SALE_TH) SALE_TH
             , COLUMN_JSON(S.TITLE_BLOB) TITLE_JSON
             , S.FROM_DT
             , S.TO_DT
             , S.CURR_CD
             , S.STAT_CD
             , S.LIVE_BID_YN
             , S.LIVE_BID_DT
             , S.AUTO_BID_REQ_CLOSE_DT
             , now() as DB_NOW
             , (select MAX(L.TO_DT) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY L.SALE_NO) END_DT
             , (<![CDATA[select LC.CLOSE_YN from LOT LC where LC.SALE_NO = S.SALE_NO AND LC.LOT_NO = (SELECT MAX(LC1.LOT_NO) FROM LOT LC1 WHERE LC1.SALE_NO = S.SALE_NO AND LC1.STAT_CD <> 'reentry')]]>) AS CLOSE_YN
             , BW.WRITE_NO
             , min(SP.FROM_DT) PREV_FROM_DT
             , max(SP.TO_DT) PREV_TO_DT
             , concat('[',
                  GROUP_CONCAT('{'
                      , '"PLACE_JSON":', ifnull(CAST(COLUMN_JSON(SP.PLACE_BLOB) as char), ''), ', '
                      , '"ADDR_JSON":', ifnull(CAST(COLUMN_JSON(SP.ADDR_BLOB) as char), ''), ', '
                      , '"FROM_DT":"', SP.FROM_DT, '", '
                      , '"TO_DT":"', SP.TO_DT, '", '
                      , '"FROM_TIME":"', SP.FROM_TIME, '", '
                      , '"TO_TIME":"', SP.TO_TIME, '", '
                      , '"MAP_URL":"', ifnull(SP.MAP_URL, ''), '"'
                      , '}')
            ,']') as PREVIEW_JSON
            , if(S.SALE_KIND_CD in('plan', 'main', 'hongkong') and S.TO_DT &lt; current_timestamp - interval 5 year, 'Y', 'N') as IS_OLD_SALE
        from SALE S
             LEFT OUTER JOIN BBS_WRITE BW ON BW.SALE_NO = S.SALE_NO AND BBS_ID = 'notice'
             LEFT OUTER JOIN SALE_PREV SP ON S.SALE_NO = SP.SALE_NO
        where S.SALE_NO = #{sale_no}
          and S.DEL_YN ='N'
          and S.WWW_DISP_YN = 'Y'
    </select>

    <select id="selectCategoryList" parameterType="CommonMap" resultType="CommonMap">
        SELECT CD_ID
             , CD_NM
             , CD_NM_EN
        FROM CODE
        WHERE GRP_ID = 'artwork_category'
          AND CD_ID IN (SELECT IFNULL(P_CD_ID, CD_ID) FROM CODE WHERE GRP_ID = 'artwork_category' AND CD_ID IN (SELECT IFNULL(P_CD_ID, CD_ID) FROM CODE WHERE GRP_ID = 'artwork_category' AND CD_ID IN (SELECT CATE_CD FROM LOT WHERE SALE_NO = #{sale_no})))
        ORDER BY DISP_ORD
    </select>
    <select id="selectLotTagList" parameterType="CommonMap" resultType="CommonMap">
        SELECT LOT_TAG
        FROM LOT
        WHERE SALE_NO = #{sale_no} and WWW_DISP_YN = 'Y' and LOT_TAG is not null
        GROUP BY LOT_TAG
    </select>

    <select id="selectLotListPaging" parameterType="CommonMap" resultType="CommonMap">
        <include refid="selectLotList"/>
        LIMIT #{offset}, #{size}
    </select>
    <select id="selectLotListCount" parameterType="CommonMap" resultType="int">
        select  count(*) as CNT
        from (
        <include refid="selectLotList"/>
        ) A
    </select>
    <sql id="selectLotList">
        select 	L.LOT_NO
            , L.STAT_CD, L.FROM_DT, L.TO_DT
            , L.START_PRICE
            , L.GROW_PRICE
            , COLUMN_JSON(L.TITLE_BLOB) TITLE_JSON
            , COLUMN_JSON(L.STITLE_BLOB) STITLE_JSON
            , L.EDITION
            , COLUMN_JSON(L.MAKE_YEAR_BLOB) MAKE_YEAR_JSON
            , COLUMN_JSON(L.SIGN_INFO_BLOB) SIGN_INFO_JSON
            , COLUMN_JSON(AT.ARTIST_NAME_BLOB) ARTIST_NAME_JSON
            , AT.BORN_YEAR
            , AT.DIE_YEAR
            , CD.CD_NM as MATE_NM
            , CD.CD_NM_EN as MATE_NM_EN
            , CD.CD_NM_CN as MATE_NM_CN
            , LI.FILE_PATH as LOT_IMG_PATH
            , LI.FILE_NAME as LOT_IMG_NAME
            , IFNULL(BD.LAST_PRICE, L.DISP_SOLD_PRICE) AS LAST_PRICE
            , ifnull(BD.SOLD_YN, 'N') as SOLD_YN
            , if(L.TO_DT &lt; now(), 'Y', 'N') as END_YN
            , ifnull(BD.BID_CNT, 0) as BID_CNT
            , L.EXPE_PRICE_INQ_YN as EXPE_PRICE_INQ_YN # YDH 2016.08.13 컬럼 추가처리
            , COLUMN_JSON(L.EXPE_PRICE_FROM_BLOB) EXPE_PRICE_FROM_JSON
            , COLUMN_JSON(L.EXPE_PRICE_TO_BLOB) EXPE_PRICE_TO_JSON
            , CONCAT('['
                , GROUP_CONCAT('{',
                '"UNIT_CD":"', ifnull(LS.UNIT_CD, 'cm') ,'",',
                '"SIZE1":', ifnull(LS.SIZE1,0) ,',',
                '"SIZE2":', ifnull(LS.SIZE2,0) ,',',
                '"SIZE3":', ifnull(LS.SIZE3,0) ,',',
                '"CANVAS":', ifnull(LS.CANVAS,0) ,',',
                '"DIAMETER_YN":"', ifnull(LS.DIAMETER_YN,'N') ,'",',
                '"PREFIX":"', ifnull(LS.PREFIX,'') ,'",',
                '"SUFFIX":"', ifnull(LS.SUFFIX,'') ,'",',
                '"MIX_CD":"', ifnull(LS.MIX_CD,'h') ,'",',
                '"CANVAS_EXT_YN":"', ifnull(LS.CANVAS_EXT_YN,'N'), '"',
                '}')
            ,']') AS LOT_SIZE_JSON
		    , L.CLOSE_YN
            , L.IMG_DISP_YN
            , now() as DB_NOW
            , COLUMN_JSON(L.COND_RPT_BLOB) COND_RPT_JSON   # YDH. 컨디션리포트용 데이터 컬럼 추가.
            , IFNULL(L.GUARANTEE_YN, 'Y') GUARANTEE_YN
            , L.WINE_YN
            , IFNULL(L.FRAME_CD, 'none') AS FRAME_CD
            , L.ZEROBASE_PRICE_YN
        from LOT L
            left outer join (
                select BD.*, BD.BID_PRICE as LAST_PRICE, <![CDATA[if(L.TO_DT < now(), 'Y', 'N') as SOLD_YN ]]>
                    , (select count(A.BID_NO) from BID A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO) as BID_CNT
                from LOT L inner join BID BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
                    and BD.BID_NO = (select A.BID_NO from BID A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO order by A.BID_PRICE desc, A.BID_DT asc, A.BID_NO asc limit 1)
                where L.SALE_NO = #{sale_no}
            ) BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
            left outer join ARTIST AT on AT.ARTIST_NO = L.ARTIST_NO
            left outer join CODE CD	on CD.grp_id = 'material' and CD.CD_ID = L.MATE_CD
            left outer join LOT_IMG LI on LI.SALE_NO = L.SALE_NO and LI.LOT_NO = L.LOT_NO
                and LI.IMG_NO = (select A.IMG_NO from LOT_IMG A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO order by A.DISP_ORD limit 1)
            join SALE S ON S.SALE_NO = L.SALE_NO
            left outer join LOT_SIZE LS ON LS.SALE_NO = L.SALE_NO AND LS.LOT_NO = L.LOT_NO
        where L.WWW_DISP_YN = 'Y'
            and L.SALE_NO = #{sale_no}
        <if test="lot_tag != null">
            and L.LOT_TAG = #{lot_tag}
        </if>
        <if test="cate_cd != null">
            and L.CATE_CD in (select cd_id from CODE where grp_id = 'artwork_category' and p_cd_id = #{cate_cd} union
            select cd_id from CODE where grp_id = 'artwork_category' and p_cd_id in (select cd_id from CODE where grp_id = 'artwork_category' and p_cd_id = #{cate_cd}))
        </if>
        <if test="search_text != null">
            and (
                COLUMN_GET(AT.ARTIST_NAME_BLOB, 'ko' AS CHAR) like concat('%', #{search_text}, '%')
                or COLUMN_GET(AT.ARTIST_NAME_BLOB, 'en' AS CHAR) like concat('%', #{search_text}, '%')
                or COLUMN_GET(AT.ARTIST_NAME_BLOB, 'zh' AS CHAR) like concat('%', #{search_text}, '%')
                or COLUMN_GET(L.TITLE_BLOB, 'ko' AS CHAR) like concat('%', #{search_text}, '%')
                or COLUMN_GET(L.TITLE_BLOB, 'en' AS CHAR) like concat('%', #{search_text}, '%')
                or COLUMN_GET(L.TITLE_BLOB, 'zh' AS CHAR) like concat('%', #{search_text}, '%')
            )
        </if>
        group by L.SALE_NO , L.LOT_NO
        order by
        <choose>
            <when test="sort_by == 'LOTAS'">L.LOT_NO</when>
            <when test="sort_by == 'LOTDE'">L.LOT_NO desc</when>
            <when test="sort_by == 'ESTAS'">COLUMN_GET(L.EXPE_PRICE_FROM_BLOB, 'KRW' as double), L.LOT_NO</when>
            <when test="sort_by == 'ESTDE'">COLUMN_GET(L.EXPE_PRICE_FROM_BLOB, 'KRW' as double) desc, L.LOT_NO</when>
            <when test="sort_by == 'ENDAS'">S.TO_DT, L.LOT_NO</when>
            <when test="sort_by == 'ENDDE'">S.TO_DT DESC, L.LOT_NO</when>
            <when test="sort_by == 'BIPAS'">BD.LAST_PRICE, L.LOT_NO</when>
            <when test="sort_by == 'BIPDE'">BD.LAST_PRICE desc, L.LOT_NO</when>
            <when test="sort_by == 'BICAS'">BD.BID_CNT, L.LOT_NO</when>
            <when test="sort_by == 'BICDE'">BD.BID_CNT desc, L.LOT_NO</when>
            <otherwise>L.LOT_NO</otherwise>
        </choose>
    </sql>

    <select id="selectLotInfo" parameterType="CommonMap" resultType="CommonMap">
        select L.SALE_NO, L.LOT_NO
            , IF(S.SALE_TH_DSP_YN = 'N', '', S.SALE_TH) SALE_TH
            , COLUMN_JSON(S.TITLE_BLOB) TITLE_JSON
            , COLUMN_JSON(S.NOTICE_DTL_BLOB) NOTICE_DTL_JSON
            , S.CURR_CD
            , S.FROM_DT
            , S.TO_DT
            , S.LIVE_BID_YN
            , S.LIVE_BID_DT
            , S.AUTO_BID_REQ_CLOSE_DT
            , L.STAT_CD, L.FROM_DT, L.TO_DT
            , L.TO_DT AS SALE_TO_DT
            , L.START_PRICE
            , L.GROW_PRICE
            , COLUMN_JSON(L.TITLE_BLOB) TITLE_JSON
            , COLUMN_JSON(L.STITLE_BLOB) STITLE_JSON
            , COLUMN_GET(L.TITLE_BLOB, 'ko' as CHAR) TITLE_KO_TXT
            , COLUMN_GET(L.TITLE_BLOB, 'en' as CHAR) TITLE_EN_TXT
            , L.EDITION
            , COLUMN_JSON(L.MAKE_YEAR_BLOB) MAKE_YEAR_JSON
            , TRIM(COLUMN_GET(L.MAKE_YEAR_BLOB, 'ko' as char)) as MAKE_YEAR_KO
            , COLUMN_JSON(L.SIGN_INFO_BLOB) SIGN_INFO_JSON
            , COLUMN_JSON(L.COND_RPT_BLOB) COND_RPT_JSON   # YDH. 컨디션리포트용 데이터 컬럼 추가.
            , COLUMN_JSON(L.LITE_INFO_BLOB) LITE_INFO_JSON
            , COLUMN_JSON(L.EXHI_INFO_BLOB) EXHI_INFO_JSON   # YDH. 전시정보 데이터 컬럼 추가.
            , COLUMN_JSON(L.PROV_INFO_BLOB) PROV_INFO_JSON   # YDH. 소장정보 데이터 컬럼 추가.
            , COLUMN_JSON(L.ETC_INFO_BLOB) ETC_INFO_JSON   # YDH. 기타정보 데이터 컬럼 추가.
            , COLUMN_JSON(L.CMMT_BLOB) CMMT_JSON
            , COLUMN_JSON(AT.ARTIST_NAME_BLOB) ARTIST_NAME_JSON
            , COLUMN_GET(AT.ARTIST_NAME_BLOB, 'ko' as CHAR) ARTIST_NAME_KO_TXT
            , COLUMN_GET(AT.ARTIST_NAME_BLOB, 'en' as CHAR) ARTIST_NAME_EN_TXT
            , AT.BORN_YEAR
            , AT.DIE_YEAR
            , CD.CD_NM as MATE_NM
            , CD.CD_NM_EN as MATE_NM_EN
            , CD.CD_NM_CN as MATE_NM_CN
            , IFNULL(BD.LAST_PRICE, L.DISP_SOLD_PRICE) AS LAST_PRICE
            , ifnull(BD.SOLD_YN, 'N') as SOLD_YN
            , if(now() > L.TO_DT, 'Y', 'N') as END_YN
            , ifnull(BD.BID_CNT, 0) as BID_CNT
            , COLUMN_JSON(L.EXPE_PRICE_FROM_BLOB) EXPE_PRICE_FROM_JSON
            , COLUMN_JSON(L.EXPE_PRICE_TO_BLOB) EXPE_PRICE_TO_JSON
            , CONCAT('['
                , GROUP_CONCAT('{',
                    '"UNIT_CD":"', ifnull(LS.UNIT_CD, 'cm') ,'",',
                    '"SIZE1":', ifnull(LS.SIZE1,0) ,',',
                    '"SIZE2":', ifnull(LS.SIZE2,0) ,',',
                    '"SIZE3":', ifnull(LS.SIZE3,0) ,',',
                    '"CANVAS":', ifnull(LS.CANVAS,0) ,',',
                    '"DIAMETER_YN":"', ifnull(LS.DIAMETER_YN,'N') ,'",',
                    '"PREFIX":"', ifnull(LS.PREFIX,'') ,'",',
                    '"SUFFIX":"', ifnull(LS.SUFFIX,'') ,'",',
                    '"MIX_CD":"', ifnull(LS.MIX_CD,'h') ,'",',
                    '"CANVAS_EXT_YN":"', ifnull(LS.CANVAS_EXT_YN,'N') , '"',
                '}')
            ,']') AS LOT_SIZE_JSON
            , GROUP_CONCAT(ifnull(LS.PREFIX,''),' ', CASE WHEN LS.DIAMETER_YN = 'Y' THEN 'ø' ELSE '' END,
                ifnull(truncate(LS.SIZE1, 1),''), CASE WHEN LS.SIZE1 IS NULL THEN '' ELSE '×' END,
                ifnull(truncate(LS.SIZE2, 1),''), CASE WHEN LS.SIZE3 IS NULL THEN '' ELSE '×' END,
                ifnull(truncate(LS.SIZE3, 1),''), case when LS.MIX_CD = 'height' then '(h)' else '' end,  'cm', case when LS.SUFFIX is null then '' else ' (' end, ifnull(LS.SUFFIX,''), case when LS.SUFFIX is null then '' else ')' end, CHAR(10))
            AS LOT_SIZE_STRING
            , COLUMN_JSON(AT.PROFILE_BLOB) PROFILE_JSON
            , SA.ARTWORK_NOS
            , L.IMG_DISP_YN
            , L.EXPE_PRICE_INQ_YN
            , now() as DB_NOW
            , L.WINE_YN
            , IFNULL(L.FRAME_CD, 'none') AS FRAME_CD
            , IFNULL(L.GUARANTEE_YN, 'Y') GUARANTEE_YN
            , L.ZEROBASE_PRICE_YN
        from LOT L
            join SALE S on L.SALE_NO = S.SALE_NO
            left outer join (
                select BD.*, BD.BID_PRICE as LAST_PRICE, <![CDATA[if(L.TO_DT < now(), 'Y', 'N') as SOLD_YN ]]>
                    , (select count(A.BID_NO) from BID A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO) as BID_CNT
                from LOT L inner join BID BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
                    and BD.BID_NO = (select A.BID_NO from BID A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO order by A.BID_PRICE desc, A.BID_DT asc, A.BID_NO asc limit 1)
                inner join CUST CU on BD.CUST_NO = CU.CUST_NO
                where  L.SALE_NO = #{sale_no}
            ) BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
            left outer join ARTIST AT on AT.ARTIST_NO = L.ARTIST_NO
            left outer join CODE CD on CD.grp_id = 'material' and CD.CD_ID = L.MATE_CD
            left outer join LOT_SIZE LS ON LS.SALE_NO = L.SALE_NO AND LS.LOT_NO = L.LOT_NO
            LEFT OUTER JOIN (SELECT SALE_NO, LOT_NO, GROUP_CONCAT(ARTWORK_NO) ARTWORK_NOS FROM SALE_ARTWORK WHERE SALE_NO = #{sale_no} AND LOT_NO = #{lot_no}) SA
                ON L.SALE_NO = SA.SALE_NO AND L.LOT_NO = SA.LOT_NO
        where L.SALE_NO = #{sale_no}
            and L.LOT_NO = #{lot_no}
        group by L.SALE_NO, L.LOT_NO
    </select>

    <select id="selectManager" parameterType="int" resultType="CommonMap">
        SELECT E.TEL, E.EMP_NAME, E.EMP_NAME_EN
        FROM CUST CU LEFT OUTER JOIN EMP E ON CU.EMP_NO = E.EMP_NO
        WHERE CU.STAT_CD = 'normal'
            AND CU.CUST_NO = #{cust_no}
            AND CU.JOIN_KIND_CD = 'online'
    </select>

    <select id="selectCustInteLotList" parameterType="CommonMap" resultType="CommonMap">
        select L.SALE_NO, L.LOT_NO, IFNULL(IL.DEL_YN, 'Y') AS INTE_LOT_DEL, case when IL.DEL_YN is not null then 'Y' else 'N' end as INTE_LOT
        from LOT L
            join SALE S on L.SALE_NO = S.SALE_NO
            join CUST_INTE_LOT IL
                ON L.SALE_NO = IL.SALE_NO AND L.LOT_NO = IL.LOT_NO AND IL.DEL_YN = 'N'
        where L.WWW_DISP_YN = 'Y'
            and L.SALE_NO = #{sale_no}
            and IL.CUST_NO = #{cust_no}
    </select>

    <insert id="insertCustInteLot" parameterType="CommonMap">
        INSERT INTO CUST_INTE_LOT(CUST_NO, SALE_NO, LOT_NO, REG_DT)
        VALUES(#{cust_no}, #{sale_no}, #{lot_no}, now())
    </insert>

    <delete id="deleteCustInteLot" parameterType="CommonMap">
        DELETE FROM CUST_INTE_LOT WHERE CUST_NO = #{cust_no} AND SALE_NO = #{sale_no} AND LOT_NO = #{lot_no};
    </delete>

    <select id="selectLotRefreshList" parameterType="CommonMap" resultType="CommonMap">
        select L.LOT_NO, L.STAT_CD, L.FROM_DT, L.TO_DT, L.START_PRICE
            , COLUMN_JSON(L.EXPE_PRICE_FROM_BLOB) EXPE_PRICE_FROM_JSON
            , COLUMN_JSON(L.EXPE_PRICE_TO_BLOB) EXPE_PRICE_TO_JSON
            , ifnull(BD.LAST_PRICE, 0) LAST_PRICE
            , ifnull(BD.BID_CNT, 0) as BID_CNT
            , now() DB_NOW
            , if(L.TO_DT &lt; now(), 'Y', 'N') as END_YN
            , ifnull(L.GROW_PRICE, 0) as GROW_PRICE
        from LOT L
            left outer join (
                select BD.SALE_NO, BD.LOT_NO, BD.BID_PRICE as LAST_PRICE
                    , (select count(A.BID_NO) from BID A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO) as BID_CNT
                from LOT L
                    inner join BID BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
                        and BD.BID_NO = (select A.BID_NO from BID A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO order by A.BID_PRICE desc, A.BID_DT asc, A.BID_NO asc limit 1)
                where L.SALE_NO = #{sale_no}
            ) BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
        where L.WWW_DISP_YN = 'Y'
            and L.SALE_NO = #{sale_no}
            and L.LOT_NO in (
            <foreach collection="lot_list" item="item" separator=",">
                #{item}
            </foreach>
        )
        order by L.LOT_NO
    </select>

    <select id="selectCurrentLotInfo" parameterType="CommonMap" resultType="CommonMap">
    <![CDATA[
        select L.LOT_NO, (select COLUMN_JSON(AT.ARTIST_NAME_BLOB) from ARTIST AT where AT.ARTIST_NO = L.ARTIST_NO) ARTIST_NAME_JSON
        from SALE S
            join LOT L on S.SALE_NO = L.SALE_NO and L.WWW_DISP_YN = 'Y' and L.STAT_CD != 'reentry'
        where DATE_ADD(S.TO_DT, INTERVAL -1 minute) <= now()
            and L.TO_DT >= now()
            and S.SALE_NO = #{sale_no}
        order by LOT_NO limit 1
     ]]>
    </select>

    <select id="selectSaleCertInfo" parameterType="CommonMap" resultType="CommonMap">
        select count(*) as CNT, (select max(A.HP) from CUST A where A.CUST_NO = #{cust_no}) as HP
        from SALE_CERT A
        where A.DEL_YN = 'N' and A.SALE_NO = #{sale_no} and A.CUST_NO = #{cust_no}
    </select>

    <insert id="insertSaleCert" parameterType="Map" useGeneratedKeys="true" keyProperty="sale_cert_no">
        insert into SALE_CERT (SALE_NO, CUST_NO, HP, CUST_HP, DONE_CD, REG_DT, REG_EMP_NO)
        VALUES (
                   #{sale_no},
                   #{cust_no},
                   #{hp},
                   (select max(A.HP) from CUST A where A.CUST_NO = #{cust_no}),
                   #{done_cd},
                   now(),
                   #{cust_no}
               );
    </insert>
    
    <update id="updateSaleCert" parameterType="CommonMap">
        update SALE_CERT set DONE_CD = 'modify' where CUST_NO = #{cust_no} and SALE_CERT_NO = #{sale_cert_no};
    </update>

    <select id="selectBidListPaging" parameterType="CommonMap" resultType="CommonMap">
        <include refid="selectBidList"/>
        LIMIT #{offset}, #{size}
    </select>
    <select id="selectBidListCount" parameterType="CommonMap" resultType="int">
        select  count(*) as CNT
        from (
        <include refid="selectBidList"/>
        ) A
    </select>
    <sql id="selectBidList">
        select BD.SALE_NO, BD.LOT_NO, BD.CUST_NO, BD.BID_NO, BD.BID_PRICE, BD.BID_DT, BD.BID_KIND_CD, ifnull(BD2.END_YN, 'N') as END_YN,
            CASE WHEN BD.CUST_NO = #{cust_no} THEN CU.LOGIN_ID ELSE concat(substr(CU.LOGIN_ID, 1, 2), '***') END CUST_ID,
            CASE WHEN BD.CUST_NO = #{cust_no} THEN 'Y' ELSE 'N' END SELF_YN, BD.BID_GROW_PRICE
        from BID BD
            left outer join (
                select BD.*, BD.BID_PRICE as LAST_PRICE, <![CDATA[if(L.TO_DT < now(), 'Y', 'N') END_YN]]>, CU.CUST_NAME
                    , (select count(A.BID_NO) from BID A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO) as BID_CNT
                from LOT L inner join BID BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
                    inner join CUST CU on BD.CUST_NO = CU.CUST_NO
                where L.SALE_NO = #{sale_no} and L.LOT_NO = #{lot_no}
                order by BD.BID_PRICE desc, BD.BID_DT asc, BD.BID_NO asc limit 1
            ) as BD2
                on BD2.SALE_NO = BD.SALE_NO and BD2.LOT_NO = BD.LOT_NO and BD2.BID_NO = BD.BID_NO
            inner join CUST CU on CU.CUST_NO = BD.CUST_NO
        where BD.SALE_NO = #{sale_no} and BD.LOT_NO = #{lot_no}
        order by BD.BID_PRICE desc, BD.BID_DT asc, BD.BID_NO asc
    </sql>

    <select id="selectCustInfo" parameterType="CommonMap" resultType="CommonMap">
        select	CU.CUST_NO
             , (select CASE WHEN max(CP.VALID_TO_DT) >= NOW() THEN "Y" ELSE "N" END
                from CUST_PAY CP where CU.cust_no = CP.cust_no) IS_MEMBERSHIP
             , CU.EMP_GB IS_EMPLOYEE
        from CUST CU
        where JOIN_KIND_CD = 'online'
          and CU.STAT_CD = 'normal'
          and CU.CUST_NO = #{cust_no}
    </select>

    <select id="selectBidOnce" parameterType="CommonMap" resultType="CommonMap">
        #단일 응찰
        #같은 고객이 기존 최고가인 경우 중복응찰은 하지 못한다.
        select 1 as chk, BD.LAST_PRICE as PREV_PRICE
            , 1 as ord
            , #{sale_no} as SALE_NO, #{lot_no} as LOT_NO, #{cust_no} as CUST_NO
            , #{bid_price} as BID_PRICE
            , 'online_once' as BID_KIND_CD
            , null as REQ_NO
            , now(6) as BID_DT
            , L.GROW_PRICE as BID_GROW_PRICE
        from LOT L
            left outer join (
                select BD.SALE_NO, BD.LOT_NO, BD.BID_PRICE as LAST_PRICE, BD.BID_DT, BD.BID_NO, BD.CUST_NO
                from LOT L inner join BID BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
                where L.SALE_NO = #{sale_no} and L.LOT_NO = #{lot_no}
                order by BD.BID_PRICE desc, BD.BID_DT asc, BD.BID_NO asc limit 1
            ) as BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
        where L.SALE_NO = #{sale_no} and L.LOT_NO = #{lot_no}
            and #{bid_price} >= ifnull(BD.LAST_PRICE + L.GROW_PRICE, L.START_PRICE)
            and #{cust_no} != ifnull(BD.CUST_NO, 0)
            and L.TO_DT >= now(6)
    </select>
    <select id="selectBidOnceAuto" parameterType="CommonMap" resultType="CommonMap">
        #자동응찰을 입력한다.
        #이전 자동응찰 신청 금액이 이전에 최종가 보다 높으면(즉 자기자신이 최종 응찰하였을 경우) 응찰 처리한다.
        #즉 수동응찰가 보다 낮은 자동응찰 금액이라도 응찰 신청 금액을 입력한다.
        select 1 as chk, #{PREV_PRICE} as PREV_PRICE
            , 2 as ord
            , R.SALE_NO, R.LOT_NO, R.CUST_NO
            , <![CDATA[if(R.BID_PRICE <= #{BID_PRICE}, R.BID_PRICE, #{BID_PRICE} + f_grow_price(#{BID_PRICE}))]]> as BID_PRICE
            , R.BID_KIND_CD
            , R.REQ_NO
            , R.REQ_DT as BID_DT
            , f_grow_price(#{BID_PRICE}) as BID_GROW_PRICE
        from AUTO_BID_REQ R
            inner join LOT L on L.SALE_NO = R.SALE_NO and R.LOT_NO = L.LOT_NO
            left outer join (
                select BD.SALE_NO, BD.LOT_NO, BD.BID_PRICE as LAST_PRICE, BD.BID_DT, BD.BID_NO, BD.CUST_NO
                from LOT L inner join BID BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
                where L.SALE_NO = #{sale_no} and L.LOT_NO = #{lot_no}
                order by BD.BID_PRICE desc, BD.BID_DT asc, BD.BID_NO asc limit 1
            ) as BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
        where R.SALE_NO = #{SALE_NO} and R.LOT_NO = #{LOT_NO} and R.BID_KIND_CD = 'online_auto' and R.ABORT_YN = 'N'
            and R.BID_PRICE > #{PREV_PRICE} and R.CUST_NO != #{CUST_NO}
            #and @chk = 1
    </select>
    <insert id="insertBidOnce" parameterType="CommonMap">
        insert into BID (SALE_NO, LOT_NO, CUST_NO, BID_PRICE, BID_KIND_CD, AUTO_BID_REQ_NO, BID_DT, REG_DT, ETC, BID_GROW_PRICE)
        values
        <foreach collection="list" item="item" separator=" , ">
            (#{item.SALE_NO}, #{item.LOT_NO}, #{item.CUST_NO}, #{item.BID_PRICE}, #{item.BID_KIND_CD}, #{item.REQ_NO}, #{item.BID_DT}
                , now(6), concat('once.', #{item.ord}), #{item.BID_GROW_PRICE})
        </foreach>
    </insert>

    <update id="updateLotToDt" parameterType="CommonMap">
        #경매종료가 30초 전이면 시간을 30초 연장한다.
        update LOT
        set TO_DT = date_add(TO_DT, INTERVAL 30 SECOND)
        where SALE_NO = #{sale_no}
            and LOT_NO &gt;= #{lot_no}
            and 1 = (
                select if(L2.TO_DT &gt;= now(6) and date_add(now(6), INTERVAL 30 SECOND) &gt;= L2.TO_DT, 1, 0)
                from (select TO_DT from LOT where SALE_NO = #{sale_no} and LOT_NO = #{lot_no}) L2
            );
    </update>

    <select id="selectBidMaxBidPrice" parameterType="CommonMap" resultType="long">
        SELECT max(BID_PRICE) max_bid_price FROM BID WHERE SALE_NO = #{sale_no} AND LOT_NO  = #{lot_no};
    </select>
    <update id="updateLotGrowPrice" parameterType="CommonMap">
        #호가 자동 변경처리(YDH, 2019.09.16. 2019.10.02수정보완)
        update LOT
        set GROW_PRICE = f_grow_price(if(#{max_bid_price} is null, #{bid_price}, if(#{bid_price} &lt;= #{max_bid_price}, #{max_bid_price}, #{bid_price})))
        where SALE_NO = #{sale_no}
            and LOT_NO  = #{lot_no};
    </update>
    
    <insert id="insertBidAuto">
        set @db_now = now(6);
		set @req_no := 0;
		set @sale_no := #{sale_no};
        set @lot_no := #{lot_no};
        set @cust_no := #{cust_no};
        set @bid_price := #{bid_price};

        set @chk := 0;
		set @p_req_no := 0;
		set @last_req_no := 0;
		set @last_price := 0;

        #자동응찰 신청 입력
        #기존 최고가 보다 큰 금액, 날짜 검사
        #자동응찰시 최고가보다 큰 이전 자동응찰 신청한 내역이 있는지 확인해야 한다.
        insert into AUTO_BID_REQ (SALE_NO, LOT_NO, CUST_NO, BID_KIND_CD, REQ_DT, BID_PRICE, REG_DT)
        select L.SALE_NO, L.LOT_NO, @cust_no, 'online_auto', @db_now, @bid_price, @db_now
        from LOT L
            left outer join (
                select BD.SALE_NO, BD.LOT_NO, BD.BID_PRICE as LAST_PRICE
                from LOT L inner join BID BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
                where L.SALE_NO = @sale_no and L.LOT_NO = @lot_no
                order by BD.BID_PRICE desc, BD.BID_DT asc, BD.BID_NO asc limit 1
            ) as BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
        where L.SALE_NO = @sale_no and L.LOT_NO = @lot_no
            and @bid_price >= ifnull(BD.LAST_PRICE + L.GROW_PRICE, L.START_PRICE)
            and L.TO_DT >= @db_now;

        set @chk := if(row_count() > 0, 1, 0);
        set @req_no := if(@chk = 1, last_insert_id(), 0);

        insert into BID (SALE_NO, LOT_NO, CUST_NO, BID_PRICE, BID_KIND_CD, AUTO_BID_REQ_NO, BID_DT, REG_DT, ETC, BID_GROW_PRICE)
        select SALE_NO, LOT_NO, CUST_NO, BID_PRICE, 'online_auto', REQ_NO, BID_DT, now(6), concat('auto.', ord), BID_GROW_PRICE
        from (
            #자동응찰 시작
            #경매 처음이면 START_PRICE, 경매중이면 최종가 + 호가
            select 	0 as tmp, (@chk := 2) as chk
                , 1 as ord
                , R.SALE_NO, R.LOT_NO, R.CUST_NO
                , (@last_price := if(BD.LAST_PRICE is null, L.START_PRICE, BD.LAST_PRICE + f_grow_price(BD.LAST_PRICE))) as BID_PRICE
                , (@last_req_no := R.REQ_NO) as REQ_NO
                , R.REQ_DT as BID_DT
                , f_grow_price(@last_price) as BID_GROW_PRICE
            from AUTO_BID_REQ R
                inner join LOT L on L.SALE_NO = R.SALE_NO and R.LOT_NO = L.LOT_NO
                left outer join (
                    select BD.SALE_NO, BD.LOT_NO, BD.CUST_NO, BD.BID_GROW_PRICE, BD.BID_PRICE as LAST_PRICE
                    from LOT L
                        inner join BID BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
                    where L.SALE_NO = @sale_no and L.LOT_NO = @lot_no
                    order by BD.BID_PRICE desc, BD.BID_DT asc, BD.BID_NO asc limit 1
                ) as BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
            where R.SALE_NO = @sale_no and R.LOT_NO = @lot_no
                and R.REQ_NO = @req_no and R.CUST_NO = @cust_no
                and R.BID_KIND_CD = 'online_auto' and R.ABORT_YN = 'N'
                and R.BID_PRICE >= ifnull(BD.LAST_PRICE + BD.BID_GROW_PRICE, L.START_PRICE)
                and R.CUST_NO != ifnull(BD.CUST_NO, 0)
                and L.TO_DT >= @db_now
                and @req_no > 0
                and @chk = 1

            #경합처리 - 경합은 무조건 이전에 신청한 사람이 먼저 응찰한다.
            #경합시 중복응찰전까지만 처리하기 위해 @p_reg_no 사용, @last_req_no를 사용하면 앞에서 세팅되는 값이 있으므로 처리가 안된다.
            union
            select (@p_req_no := R.REQ_NO) as tmp, 0 as chk
                , 2 as ord
                , R.SALE_NO, R.LOT_NO, R.CUST_NO
                , (@last_price := @last_price + f_grow_price(@last_price)) as BID_PRICE
                , (@last_req_no := R.REQ_NO) as REQ_NO
                , R.REQ_DT as BID_DT
                , f_grow_price(@last_price) as BID_GROW_PRICE
            from (
                select T.*, (@t := 1) as t
                from (
                    select 	S.seq, R.SALE_NO, R.LOT_NO, R.REQ_NO, R.CUST_NO
                        , R.REQ_DT
                        , R.BID_PRICE
                        , L.GROW_PRICE
                    from LOT L
                        inner join AUTO_BID_REQ R on R.BID_KIND_CD = 'online_auto' and R.ABORT_YN = 'N' and R.BID_PRICE > @last_price and R.SALE_NO = L.SALE_NO and R.LOT_NO = L.LOT_NO
                            and (select count(*) from AUTO_BID_REQ where SALE_NO = @sale_no and LOT_NO = @lot_no and ABORT_YN = 'N' and BID_PRICE >= (@last_price + L.GROW_PRICE) and REQ_NO != @req_no) > 0
                        join (select seq from seq_1_to_100) as S
                    where L.SALE_NO = @sale_no
                        and L.LOT_NO = @lot_no
                    order by S.seq, R.REQ_DT, R.REQ_NO
                ) T
                order by T.seq, T.REQ_DT, T.REQ_NO
            ) as R
            where R.BID_PRICE > @last_price
                and R.REQ_NO != @p_req_no
                and @chk = 2

            # 최종가 처리 -- 최종금액과 동일한 금액 요청 처리
            union
            select 0 as tmp, (@chk := if(R.REQ_NO != @req_no, 3, 4)) as chk
                , 3 as ord, R.SALE_NO, R.LOT_NO, R.CUST_NO
                , R.BID_PRICE
                , R.REQ_NO
                , R.REQ_DT as BID_DT
                , f_grow_price(R.BID_PRICE) as BID_GROW_PRICE
            from AUTO_BID_REQ R
            where R.SALE_NO = @sale_no and R.LOT_NO = @lot_no and R.BID_KIND_CD = 'online_auto' and R.ABORT_YN = 'N'
                and R.BID_PRICE = @last_price and R.REQ_NO != @last_req_no
                and @chk = 2

            # 최종가 처리 -- 최종금액보다 큰 금액 요청 처리
            union
            select 0 as tmp, 0 as chk
                , 4 as ord, R.SALE_NO, R.LOT_NO, R.CUST_NO
                , @last_price + f_grow_price(@last_price) as BID_PRICE   #L.GROW_PRICE
                , R.REQ_NO
                , R.REQ_DT as BID_DT
                , f_grow_price(@last_price) as BID_GROW_PRICE
            from AUTO_BID_REQ R, LOT L
            where R.SALE_NO = @sale_no and R.LOT_NO = @lot_no and R.BID_KIND_CD = 'online_auto' and R.ABORT_YN = 'N'
                and L.SALE_NO = R.SALE_NO and L.LOT_NO = R.LOT_NO
                and R.BID_PRICE > @last_price
                and R.REQ_NO = @last_req_no
                and @chk = 3
        ) as BIDS
        order by ord, BID_PRICE, BID_DT, REQ_NO;

        #경매종료가 30초전이면 시간을 30초 연장한다.
        update LOT set TO_DT = date_add(TO_DT, INTERVAL 30 SECOND)
        where SALE_NO = @sale_no
            and LOT_NO &gt;= @lot_no
            and @chk &gt;= 2
            and 1 = (
                select if(L2.TO_DT &gt;= @db_now and date_add(@db_now, INTERVAL 30 SECOND) &gt;= L2.TO_DT, 1, 0)
                from (select TO_DT	from LOT where SALE_NO = @sale_no and LOT_NO = @lot_no) L2
            );

        #호가 자동 변경처리(YDH, 2019.09.16)
        set @max_bid_price := 0;
        SELECT @max_bid_price := max(BID_PRICE) FROM BID WHERE SALE_NO = @sale_no AND LOT_NO  = @lot_no;

        update LOT set GROW_PRICE = f_grow_price(@max_bid_price)
        where SALE_NO = @sale_no
        and LOT_NO  = @lot_no;
    </insert>

    <update id="updateAutoBidReqCancel" parameterType="Map">
        update AUTO_BID_REQ
        set ABORT_YN = 'Y', ABORT_DT = now(6)
        where SALE_NO = #{sale_no} and LOT_NO = #{lot_no} and REQ_NO = #{req_no}
    </update>
</mapper>