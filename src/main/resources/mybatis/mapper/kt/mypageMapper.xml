<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seoulauction.renewal.mapper.kt.MypageMapper">	
	
	<!--정회원 이력  -->
	<select id="selectCustomerCustpayList" resultType="Map">
		select CU.CUST_NO
		, DATE_FORMAT(CP.VALID_FROM_DT, '%Y.%m.%d') as  VALID_FROM_DT
		, DATE_FORMAT(CP.VALID_FROM_DT, '%d %b, %Y') as  VALID_FROM_DT_EN
		, DATE_FORMAT(CP.VALID_TO_DT, '%Y.%m.%d')  as VALID_TO_DT
		, DATE_FORMAT(CP.VALID_TO_DT, '%d %b, %Y')  as VALID_TO_DT_EN
		, DATE_FORMAT(P.PAY_DT, '%d %b, %Y')  as PAY_DT_EN
		, P.PAY_METHOD_CD
		, P.PAY_PRICE
		, DATE_FORMAT(P.PAY_DT, '%Y.%m.%d') as PAY_DT
		,CASE DAYOFWEEK(P.PAY_DT)
			WHEN '1' THEN '일'
			WHEN '2' THEN '월'
			WHEN '3' THEN '화'
			WHEN '4' THEN '수'
			WHEN '5' THEN '목'
			WHEN '6' THEN '금'
			WHEN '7' THEN '토'
		END AS weekDate
		,DATE_FORMAT(P.PAY_DT, '%T') as payTime
		, CASE WHEN CP.VALID_TO_DT &gt;= NOW() THEN '정회원' ELSE '기간만료' END VALID 
		, CD1.CD_NM PAY_METHOD_NM
		, CD1.CD_NM_EN PAY_METHOD_NM_EN
		, CD1.CD_ID PAY_METHOD_ID
		, IF(P.PG_TRANS_ID is not null and P.pg_cd='nice', 'Y', 'N' ) receipt
		, P.PG_TRANS_ID
		FROM CUST CU
		LEFT OUTER JOIN CUST_PAY CP ON CU.CUST_NO = CP.CUST_NO
		JOIN PAY P ON P.PAY_NO = CP.PAY_NO AND P.CUST_NO = CP.CUST_NO
		JOIN CODE CD1 ON P.PAY_METHOD_CD = CD1.CD_ID AND CD1.GRP_ID = 'pay_method'
		where CU.JOIN_KIND_CD = 'online'
		and CU.STAT_CD = 'normal'
		and CU.CUST_NO = #{action_user_no}
		order by P.PAY_DT desc
	</select>
	
	<!--정회원 -->
	<select id="selectCustomerInfo" resultType="CommonMap">
		select C.CUST_NAME , CASE WHEN CP.VALID_TO_DT &gt;= NOW() THEN '1' ELSE '0' END USER_ROLE <!-- 정회원 1, 준회원 0 -->
				,IF(1 &lt; DATEDIFF(DATE_ADD(CP.VALID_TO_DT, INTERVAL 1 DAY), NOW())
				AND DATEDIFF(DATE_ADD(CP.VALID_TO_DT, INTERVAL 1 DAY), NOW()) &lt; 11,
				CONCAT('D-', DATEDIFF(DATE_ADD(CP.VALID_TO_DT, INTERVAL 1 DAY), NOW())) ,
				IF(1 = DATEDIFF(DATE_ADD(CP.VALID_TO_DT, INTERVAL 1 DAY), NOW()) AND 1 = TIMESTAMPDIFF(DAY ,NOW(),DATE_ADD(CP.VALID_TO_DT, INTERVAL 1 DAY)),'D-1' ,'')) VALID_DATE
		from
				CUST C
				LEFT OUTER JOIN (SELECT CP.* FROM CUST_PAY CP WHERE CP.CUST_NO = #{action_user_no} ORDER BY VALID_TO_DT DESC LIMIT 1 ) CP ON CP.CUST_NO = C.CUST_NO
		where
			C.CUST_NO = #{action_user_no}
	</select>
	
	<!-- 아카데미 list -->
	<select id="selectAcademyList" resultType="Map">
	select
				A.CUST_NAME ,
				A.EMAIL ,
				A.HP,
				B.CANCEL_YN ,
				C.ACADEMY_PAY,
				C.ACADEMY_PAY1,
				C.ACADEMY_PAY2,
				C.ACADEMY_PAY3,
				COLUMN_JSON(C.TITLE_BLOB) TITLE_JSON,
				COLUMN_GET(C.TITLE_BLOB,
				'ko' as CHAR) TITLE_KO,
				COLUMN_GET(C.TITLE_BLOB,
				'en' as CHAR) TITLE_EN,
				C.ACADEMY_NO,
				(select pay_price from PAY P where P.PAY_NO = D.PAY_NO)  as pay_price,
				(select vat_price from PAY P where P.PAY_NO = D.PAY_NO)  as vat_price,
				(select vat from PAY P where P.PAY_NO = D.PAY_NO) as vat,
				(select PAY_METHOD_CD  from PAY P where P.PAY_NO = D.PAY_NO) as PAY_METHOD_CD
				, CD.CD_ID PAY_METHOD_ID
				, IF(P.PG_TRANS_ID is not null and P.pg_cd='nice', 'Y', 'N' ) receipt
				, P.PG_TRANS_ID
				, DATE_FORMAT(B.REG_DT, '%Y.%m.%d') REG_DT
			from
				CUST A 
				join ACADEMY_REQ B on A.CUST_NO = B.CUST_NO
				join ACADEMY C on B.ACADEMY_NO = C.ACADEMY_NO
				join ACADEMY_PAY D  on D.ACADEMY_NO = C.ACADEMY_NO and A.CUST_NO = D.CUST_NO
				join PAY P ON P.pay_no =  D.pay_no and P.cust_no = D.cust_no
				left join CODE CD on P.PAY_METHOD_CD = CD.CD_ID and CD.GRP_ID = 'pay_method'
			where
	 		A.CUST_NO = #{action_user_no} AND B.DEL_YN = 'N'
	 		group by P.PAY_NO 
			order by
					B.REG_DT desc
			limit #{offset}, #{size}
	</select>
	
	<!-- 아카데미 결제 totalcount -->
	<select id="selectAcademyCnt" resultType="int">
				SELECT COUNT(*) FROM (
			SELECT
				A.CUST_NAME ,
				A.EMAIL ,
				A.HP,
				B.CANCEL_YN ,
				C.ACADEMY_PAY,
				C.ACADEMY_PAY1,
				C.ACADEMY_PAY2,
				C.ACADEMY_PAY3,
				COLUMN_JSON(C.TITLE_BLOB) TITLE_JSON,
				COLUMN_GET(C.TITLE_BLOB,
				'ko' as CHAR) TITLE_KO,
				COLUMN_GET(C.TITLE_BLOB,
				'en' as CHAR) TITLE_EN,
				C.ACADEMY_NO,
				P.PAY_PRICE ,
				P. PAY_METHOD_CD
				, CD.CD_ID PAY_METHOD_ID
				, IF(P.PG_TRANS_ID is not null and P.pg_cd='nice', 'Y', 'N' ) receipt
				, P.PG_TRANS_ID
				, DATE_FORMAT(B.REG_DT, '%Y.%m.%d') REG_DT
			from
				CUST A 
				join ACADEMY_REQ B on A.CUST_NO = B.CUST_NO
				join ACADEMY C on B.ACADEMY_NO = C.ACADEMY_NO
				join ACADEMY_PAY D  on D.ACADEMY_NO = C.ACADEMY_NO and A.CUST_NO = D.CUST_NO
				join PAY P ON P.PAY_NO =  D.PAY_NO and P.CUST_NO = D.CUST_NO
				left join CODE CD on P.PAY_METHOD_CD = CD.CD_ID and CD.GRP_ID = 'pay_method'
			where
	 		A.CUST_NO = #{action_user_no} AND B.DEL_YN = 'N'
			group by P.PAY_NO ) as cnt
	</select>
	
	<!-- 아카데미 결제정보 -->
	<select id="selectAcademyPayInfo" resultType="CommonMap">
	select 		
		ACADEMY_PAY , 
		ACADEMY_PAY1 ,
		ACADEMY_PAY2 ,
		ACADEMY_PAY3 
	from
		ACADEMY 
		where ACADEMY_NO = #{academy_no}
	</select>
	
	<!-- 온라인경매관리 > 결제/구매내역 응찰 LIST--> 
	<sql id="sql_online_pay_bid_list">
			SELECT
				B1.*
			FROM
				SUCCESS_BID SB3
			JOIN LOT L ON
				SB3.SALE_NO = L.SALE_NO
				AND SB3.LOT_NO = L.LOT_NO
			JOIN BID B1 ON
				B1.BID_NO = SB3.BID_NO
			WHERE
				(REAL_CUST_NO =  #{action_user_no}
				OR (B1.CUST_NO =  #{action_user_no}
					AND REAL_CUST_NO IS NULL))
				and L.TO_DT &lt;= now()
			GROUP BY
				L.SALE_NO,
				L.LOT_NO
	</sql>
	
	<!-- 온라인경매관리 > 결제/구매내역 결제 LIST--> 
	<sql id="sql_online_pay_pay_list">
			SELECT
				SP.CUST_NO,
				SP.PG_CD,
				SP.PG_TRANS_ID,
				SUM(SP.PAY_PRICE) PAY_PRICE,
				LP.SALE_NO,
				LP.LOT_NO,
				C.CD_NM PAY_METHOD_NM,
				C.CD_NM_EN PAY_METHOD_NM_EN,
				C.CD_ID PAY_METHOD_ID,
				COUNT(*) PAY_CNT,
				PAY_DT,
				CONCAT('['
		        , GROUP_CONCAT('{',
		        '"PAY_PRICE":"', ifnull(SP.PAY_PRICE, 0) , '"',
		        '}')
		        ,']') AS PAY_PRICE_JSON,
		         count(*) as PAY_COUNT
			FROM
				PAY SP
			JOIN LOT_PAY LP ON
				LP.PAY_NO = SP.PAY_NO
				and LP.FEE_KIND_CD = 'payment'
			JOIN CODE C ON
				SP.PAY_METHOD_CD = C.CD_ID
				and C.GRP_ID = 'pay_method'
			GROUP BY
				LP.SALE_NO,
				LP.LOT_NO 
	</sql>
	
	<!-- 온라인경매관리 > 결제/구매내역 결제 LIST--> 
	<select id="selectPayListByCustNo" resultType="Map">
		select 
				S.SALE_NO 
				, S.ONLINE_YN
				, DATE_FORMAT(S.FROM_DT, '%Y.%m.%d  %T')  as FROM_DT
				, DATE_FORMAT(S.FROM_DT, '%d %b, %Y %T')  as FROM_DT_EN
				, DATE_FORMAT(S.TO_DT, '%Y.%m.%d  %H:%i')  as TO_DT
				, DATE_FORMAT(S.TO_DT, '%d %b, %Y %H:%i')  as TO_DT_EN
				, IF(S.SALE_TH_DSP_YN = 'N', '', CONCAT(S.SALE_TH, f_ordinal_number(S.SALE_TH))) SALE_TH, COLUMN_JSON(S.TITLE_BLOB) TITLE_JSON
			   	, COLUMN_GET(S.TITLE_BLOB, 'ko' AS CHAR) SALE_TITLE_KR 
			   	, COLUMN_GET(S.TITLE_BLOB, 'en' AS CHAR) SALE_TITLE_EN 
			   	, S.CURR_CD
				, L.LOT_NO, L.ARTIST_NO, L.REAL_CUST_NO, L.PAYMENT_FEE_SET_CD
				, COLUMN_JSON(L.TITLE_BLOB) LOT_TITLE_JSON
				, COLUMN_GET(L.TITLE_BLOB, 'ko' AS CHAR) LOT_TITLE_KR
				, COLUMN_GET(L.TITLE_BLOB, 'en' AS CHAR) LOT_TITLE_EN
				, COLUMN_JSON(L.MAKE_YEAR_BLOB)       MAKE_YEAR_JSON
				, (select CONCAT(LI.FILE_PATH, "/", LI.FILE_NAME) from LOT_IMG LI 
					where LI.SALE_NO = L.SALE_NO and LI.LOT_NO = L.LOT_NO limit 1) LOT_IMG
				, CAST(COLUMN_JSON(A.ARTIST_NAME_BLOB) AS CHAR) ARTIST_NAME_JSON
				, IFNULL
				(COLUMN_GET(A.ARTIST_NAME_BLOB, 'ko' AS CHAR), '') ARTIST_NAME_KR
				, IFNULL(COLUMN_GET(A.ARTIST_NAME_BLOB, 'en' AS CHAR), '') ARTIST_NAME_EN
				, CONCAT('[', GROUP_CONCAT('{"PRICE_FROM":', ifnull(LF.PRICE_FROM, 0), ', "PRICE_TO":', ifnull(LF.PRICE_TO, 0) , ', "RATE":', ifnull(LF.RATE, 0.0), '}'), ']') LOT_FEE_JSON
				, B.BID_PRICE
				, LF.FEE
				, DATE_FORMAT(B.BID_DT, '%Y.%m.%d') as BID_DT
				, CASE DAYOFWEEK(B.BID_DT)
					WHEN '1' THEN '일'
					WHEN '2' THEN '월'
					WHEN '3' THEN '화'
					WHEN '4' THEN '수'
					WHEN '5' THEN '목'
					WHEN '6' THEN '금'
					WHEN '7' THEN '토'
				END AS BIDWEEKDT
				, DATE_FORMAT(B.BID_DT, '%T') as BIDTIME
				, DATE_FORMAT(B.BID_DT, '%d %b, %Y %T')  as BID_DT_EN
				, DATE_FORMAT(P.PAY_DT, '(%a) %d %b, %Y %T')  as PAY_DT_EN
				, B.CUST_NO BID_CUST_NO
				, P.CUST_NO PAY_CUST_NO
				, P.PAY_METHOD_NM
				, P.PAY_METHOD_NM_EN
				, PAY_CNT
				, P.PAY_METHOD_ID
				, P.PAY_PRICE
				, P.PG_TRANS_ID
				, case when P.CUST_NO is null then 0 else 1 end PAID_CNT
				, if((select count(*) from CUST_BASE_FEE where CUST_NO = #{action_user_no} and FEE_KIND_CD = 'payment') = 0, 'N', 'Y') CUST_FEE_YN
				, DATE_FORMAT(P.PAY_DT, '%Y.%m.%d') payDate
				, CASE DAYOFWEEK(P.PAY_DT)
					WHEN '1' THEN '일'
					WHEN '2' THEN '월'
					WHEN '3' THEN '화'
					WHEN '4' THEN '수'
					WHEN '5' THEN '목'
					WHEN '6' THEN '금'
					WHEN '7' THEN '토'
					END AS payWeekDate
				,DATE_FORMAT(P.PAY_DT, '%T') as payTime
				,(select count(*) from BID where CUST_NO= #{action_user_no} and SALE_NO = S.SALE_NO and LOT_NO = L.LOT_NO) as bid_count
				, IF(P.PG_TRANS_ID is not null and P.PG_CD='nice', 'Y', 'N' ) receipt
				, C.CD_NM 
				, C.CD_NM_EN 
				, C.CD_NM_CN 
				, CONCAT('['
		        , GROUP_CONCAT('{',
		        '"UNIT_CD":"', ifnull(LS.UNIT_CD, 'cm') ,'",',
		        '"SIZE1":', ifnull(LS.SIZE1,0) ,',',
		        '"SIZE2":', ifnull(LS.SIZE2,0) ,',',
		        '"SIZE3":', ifnull(LS.SIZE3,0) ,',',
		        '"CANVAS":', ifnull(LS.CANVAS,0) ,',',
		        '"DIAMETER_YN":"', ifnull(LS.DIAMETER_YN,'N') ,'",',
		        '"PREFIX":"', ifnull(LS.PREFIX,'') ,'",',
		        '"SUFFIX":"', ifnull(LS.SUFFIX,'') ,'",',
		        '"MIX_CD":"', ifnull(LS.MIX_CD,'h') ,'",',
		        '"CANVAS_EXT_YN":"', ifnull(LS.CANVAS_EXT_YN,'N') , '"',
		        '}')
		        ,']') AS LOT_SIZE_JSON
		        , P.PAY_PRICE_JSON
		        , P.PAY_COUNT
		        ,DATE_FORMAT((SELECT VBANK_EXP_DT FROM PAY_WAIT PW WHERE PW.CUST_NO = #{action_user_no} AND S.SALE_NO = PW.REF_NO AND L.LOT_NO = PW.REF_NO2 ORDER BY PW.PAY_WAIT_NO DESC LIMIT 1),'%Y.%m.%d') VBANK_EXP_DT
		        ,IF(TIMESTAMPDIFF(DAY ,(SELECT VBANK_EXP_DT FROM PAY_WAIT PW WHERE PW.CUST_NO = #{action_user_no} AND S.SALE_NO = PW.REF_NO AND L.LOT_NO = PW.REF_NO2 ORDER BY PW.PAY_WAIT_NO DESC LIMIT 1), NOW()) &lt; 1, 'N', 'Y' ) as VBANK_EXP_DT_CLOSE_YN
		FROM
			(
			<include refid="sql_online_pay_bid_list" />
			ORDER BY B1.BID_DT
		) B
		INNER JOIN (
		SELECT
			S1.SALE_NO ,
			S1.SALE_TH_DSP_YN,
			S1.SALE_TH,
			S1.TITLE_BLOB,
			S1.FROM_DT,
			S1.TO_DT,
			S1.CURR_CD,
			IF(S1.SALE_KIND_CD = 'online' or S1.SALE_KIND_CD = 'online_zb' , 'Y', 'N') ONLINE_YN
		FROM
			SALE S1
		JOIN (
			<include refid="sql_online_pay_bid_list" />
		) B2 ON
			B2.SALE_NO = S1.SALE_NO
			GROUP BY SALE_NO
		ORDER BY
			SALE_NO DESC
			LIMIT #{offset}, #{size}
		) S ON S.SALE_NO = B.SALE_NO
		LEFT OUTER JOIN LOT L ON L.SALE_NO = B.SALE_NO AND L.LOT_NO = B.LOT_NO AND L.SALE_NO = S.SALE_NO
		LEFT OUTER JOIN ARTIST A ON
			L.ARTIST_NO = A.ARTIST_NO
		LEFT OUTER JOIN CODE C on C.GRP_ID = 'material' AND L.MATE_CD = C.CD_ID
		LEFT OUTER JOIN LOT_SIZE LS ON LS.SALE_NO = L.SALE_NO AND LS.LOT_NO = L.LOT_NO
		LEFT OUTER JOIN LOT_FEE LF ON
			LF.SALE_NO = L.SALE_NO
			AND LF.LOT_NO = L.LOT_NO
			and LF.FEE_KIND_CD = 'payment'
		LEFT OUTER JOIN (
			<include refid="sql_online_pay_pay_list" />
			) P ON
			P.SALE_NO = L.SALE_NO
			AND P.LOT_NO = L.LOT_NO
		GROUP BY
			B.SALE_NO, B.LOT_NO
		ORDER BY
			S.SALE_NO DESC, B.BID_DT DESC
	</select>
	
	<!-- 온라인경매관리 > 결제/구매내역 totalcount--> 	
	<select id="selectPayTotalCountByCustNo" resultType="int">
			SELECT
				COUNT(*)
			FROM
					(
				SELECT
						S1.SALE_NO ,
						S1.SALE_TH_DSP_YN,
						S1.SALE_TH,
						S1.TITLE_BLOB,
						S1.FROM_DT,
						S1.TO_DT,
						S1.CURR_CD
				FROM
						SALE S1
				JOIN (
					<include refid="sql_online_pay_bid_list" />
					) B2 ON
						B2.SALE_NO = S1.SALE_NO
				GROUP BY
					SALE_NO) AS CNT
	</select>
	
	<!-- 온라인경매관리 > 결제/구매내역 > 결제할 건수, 결제한 건수 --> 	
	<select id="selectPayCountByCustNo" resultType="CommonMap">
		select count(*) ROW_CNT, SUM(PAID_CNT) PAID_CNT from (
		SELECT
		B.*,
			CASE WHEN P.CUST_NO IS NULL THEN 0 ELSE 1 END PAID_CNT
		FROM
			(
			<include refid="sql_online_pay_bid_list" />
		) B
		INNER JOIN (
		SELECT
			S1.SALE_NO ,
			S1.SALE_TH_DSP_YN,
			S1.SALE_TH,
			S1.TITLE_BLOB,
			S1.FROM_DT,
			S1.TO_DT,
			S1.CURR_CD
		FROM
			SALE S1
		JOIN (
			<include refid="sql_online_pay_bid_list" />
		) B2 ON
			B2.SALE_NO = S1.SALE_NO
			GROUP BY SALE_NO
		ORDER BY
			SALE_NO DESC
		) S ON S.SALE_NO = B.SALE_NO
		LEFT OUTER JOIN LOT L ON L.SALE_NO = B.SALE_NO AND L.LOT_NO = B.LOT_NO AND L.SALE_NO = S.SALE_NO AND L.TO_DT &lt;= NOW()
		LEFT OUTER JOIN LOT_FEE LF ON
			LF.SALE_NO = L.SALE_NO
			AND LF.LOT_NO = L.LOT_NO
			AND LF.FEE_KIND_CD = 'PAYMENT'
		LEFT OUTER JOIN (
			<include refid="sql_online_pay_pay_list" />
			 ) P ON
			P.SALE_NO = L.SALE_NO
			AND P.LOT_NO = L.LOT_NO
		GROUP BY
			B.SALE_NO,
			B.LOT_NO
		) result
	</select>
	
	<!--결제내역 > 사용자정보-->
	<select id="selectCustomerByCustNo" resultType="Map">
		select CU.*
			, (SELECT CASE WHEN MAX(CP.VALID_TO_DT) &gt;= NOW() THEN "정회원" ELSE "준회원" END
			   FROM CUST_PAY CP WHERE CU.CUST_NO = CP.CUST_NO) MEMBERSHIP_NM
			, (SELECT CASE WHEN MAX(CP.VALID_TO_DT) &gt;= NOW() THEN "Y" ELSE "N" END
			    FROM CUST_PAY CP WHERE CU.CUST_NO = CP.CUST_NO) MEMBERSHIP_YN
			, (SELECT CONCAT('[', GROUP_CONCAT('"', PW.PUSH_WAY_CD, '"'), ']')
				FROM CUST_PUSH_WAY PW WHERE PW.CUST_NO = CU.CUST_NO) PUSH_WAY_JSON
			, (SELECT CONCAT('[', GROUP_CONCAT('"', IA.INTE_AREA_CD, '"'), ']')
				FROM CUST_INTE_AREA IA WHERE IA.CUST_NO = CU.CUST_NO) INTE_AREA_JSON
		   FROM CUST CU
		   where JOIN_KIND_CD = 'online'
		   and CU.STAT_CD = 'normal' 
		   and CU.CUST_NO = #{action_user_no}
	</select>
	
	<!-- 결제내역 select box -->
	<select id="selectSaleListByCustNo" resultType="Map">
	select concat(year(S.TO_DT),'-',if (month(S.TO_DT) &lt; 10, concat('0',month(S.TO_DT)), month(S.TO_DT))) as saleMonth
		from LOT L
		join SALE S on L.SALE_NO = S.SALE_NO
		left outer join LOT_FEE LF on LF.SALE_NO = L.SALE_NO and LF.LOT_NO = L.LOT_NO and LF.FEE_KIND_CD = 'payment'
		left outer join (
			select RB.* from (
				select
					B.*
					, case when @val = concat(B.SALE_NO, '_', B.LOT_NO)
						then (@rownum:=@rownum+1) else @rownum:=1 end RANK
				, @val:=concat(B.SALE_NO, '_', B.LOT_NO)
				from BID B,(select @val:='', @rownum := 0) R
				where B.BID_KIND_CD in ('online_once', 'online_auto')
				order by B.SALE_NO desc, B.LOT_NO, B.BID_PRICE desc, B.BID_DT
			) RB where RB.RANK = 1
		) B on B.SALE_NO = L.SALE_NO and B.LOT_NO = L.LOT_NO
		left outer join (
			select SP.CUST_NO, sum(SP.PAY_PRICE) PAY_PRICE, LP.SALE_NO, LP.LOT_NO, C.CD_NM PAY_METHOD_NM, count(*) PAY_CNT
			from PAY SP
			join LOT_PAY LP on LP.PAY_NO = SP.PAY_NO and LP.FEE_KIND_CD = 'payment'
			join CODE C on SP.PAY_METHOD_CD = C.CD_ID and C.GRP_ID = 'pay_method'
			group by LP.SALE_NO, LP.LOT_NO
		) P on P.SALE_NO = L.SALE_NO and P.LOT_NO = L.LOT_NO
		where L.TO_DT &lt;= NOW()
		and (B.CUST_NO = #{action_user_no} and REAL_CUST_NO is null) or REAL_CUST_NO = #{action_user_no}
		and (P.CUST_NO = null or (B.CUST_NO = #{action_user_no} and REAL_CUST_NO is null) or REAL_CUST_NO = #{action_user_no})
	group by L.SALE_NO
	order by S.TO_DT DESC;
	</select>
	
	<!-- 문의 리스트 -->
	<sql id="sql_bbs_w_list">
		SELECT * FROM (
		   	SELECT A.*,
		   	CASE WHEN C.P_CD_NM IS NULL THEN '' ELSE C.CD_NM END AS CATE_NM,
			    CASE WHEN C.P_CD_NM IS NULL THEN C.CD_NM ELSE C.P_CD_NM END AS P_CATE_NM,
			    C.CD_NM_EN P_CATE_NM_EN,
			    IF(C.P_CD_NM IS NOT NULL ,(SELECT CD.CD_NM_EN  FROM CODE CD WHERE CD.CD_ID = C.P_CD_ID AND CD.GRP_ID = 'bbs_inquiry_category'),'') CATE_NM_EN,
				CASE WHEN B.REPLY_CNT &gt; 0 THEN 'Y' ELSE 'N' END AS REPLY_YN,
				B.LAST_REPLY_DT,
				D.EMP_NAME,
				DATE_FORMAT(A.REG_DT, '%m.%d.%Y') as REG_DT_EN
			FROM BBS_WRITE A
			LEFT OUTER JOIN (
				SELECT BBS_ID, WRITE_NO, COUNT(*) REPLY_CNT, MAX(REG_DT) LAST_REPLY_DT FROM BBS_REPLY GROUP BY BBS_ID, WRITE_NO
			) B ON A.BBS_ID = B.BBS_ID AND A.WRITE_NO = B.WRITE_NO
			LEFT OUTER JOIN (
				SELECT DISTINCT CA.CD_ID, CA.CD_NM, CA.CD_NM_EN ,CC.CD_ID P_CD_ID, CC.CD_NM P_CD_NM FROM CODE CA
				JOIN CODE_GRP CB ON CA.GRP_ID = CB.GRP_ID
				LEFT OUTER JOIN CODE CC ON CA.P_CD_ID = CC.CD_ID
				where CA.GRP_ID = 'bbs_inquiry_category'
			) C ON A.CATE_CD = C.CD_ID
			LEFT OUTER JOIN EMP D ON A.EMP_NO = D.EMP_NO
			WHERE A.WRITER_NO = #{action_user_no}
		) Z
		where 1=1
	</sql>
	
	<!-- 문의 리스트 -->
	<select id="selectInquiryList" resultType="Map">
	    <include refid="sql_bbs_w_list" />
    	and	BBS_ID='inquiry' and STAT_CD='normal'
	    order by Z.REG_DT desc limit #{offset}, #{size}
	 </select>
	 
	 <!-- 문의 totalCount -->
	<select id="selectInquiryListCnt" resultType="int">
	    select count(*) AS ROW_CNT from (
		    <include refid="sql_bbs_w_list" />
	    	and	BBS_ID='inquiry' and STAT_CD='normal'
		) CNT
	</select>	

	<!-- 문의상세 -->
	<select id="selectInquiryInfo" resultType="CommonMap">
		select
		    A.*,
		    CASE WHEN C.P_CD_NM IS NULL THEN '' ELSE C.CD_NM END AS CATE_NM,
		    CASE WHEN C.P_CD_NM IS NULL THEN C.CD_NM ELSE C.P_CD_NM END AS P_CATE_NM,
		    C.CD_NM_EN P_CATE_NM_EN,
		    IF(C.P_CD_NM IS NOT NULL ,(SELECT CD.CD_NM_EN  FROM CODE CD WHERE CD.CD_ID = C.P_CD_ID AND CD.GRP_ID = 'bbs_inquiry_category'),'') CATE_NM_EN,
			CASE WHEN B.REPLY_CNT &gt; 0 THEN 'Y' ELSE 'N' END AS REPLY_YN,
			B.LAST_REPLY_DT,
			D.EMP_NAME,
			DATE_FORMAT(B.LAST_REPLY_DT, '%m.%d.%Y') AS LAST_REPLY_DT_EN
		FROM BBS_WRITE A
		LEFT OUTER JOIN (
			SELECT BBS_ID, WRITE_NO, COUNT(*) REPLY_CNT, MAX(REG_DT) LAST_REPLY_DT FROM BBS_REPLY GROUP BY BBS_ID, WRITE_NO
		) B ON A.BBS_ID = B.BBS_ID AND A.WRITE_NO = B.WRITE_NO
		LEFT OUTER JOIN (
			SELECT DISTINCT CA.CD_ID, CA.CD_NM, CA.CD_NM_EN, CC.CD_ID P_CD_ID, CC.CD_NM P_CD_NM FROM CODE CA
			JOIN CODE_GRP CB ON CA.GRP_ID = CB.GRP_ID
			LEFT OUTER JOIN CODE CC ON CA.P_CD_ID = CC.CD_ID
			where CA.GRP_ID = 'bbs_inquiry_category'
		) C ON A.CATE_CD = C.CD_ID
		LEFT OUTER JOIN EMP D ON A.EMP_NO = D.EMP_NO
		where A.BBS_ID= 'inquiry' and A.STAT_CD='normal' and A.WRITE_NO = #{write_no}
	</select>
	
	<!-- 문의 답변 -->
	<select id="selectInquiryReply" resultType="CommonMap">
		select A.*, B.EMP_NAME from BBS_REPLY A
		join EMP B on A.REG_EMP_NO = B.EMP_NO
		where A.WRITE_NO = #{write_no} 
		and A.REPLY_NO = (select X.REPLY_NO from BBS_REPLY X where ifnull(X.DEL_YN, 'N') = 'N' and X.BBS_ID = A.BBS_ID and X.WRITE_NO = A.WRITE_NO order by X.REG_DT desc limit 1)
	</select>
	
	<!-- 문의상세 파일 리스트-->
	<select id="selectFileList" resultType="CommonMap">
		select * from BBS_FILE where WRITE_NO = #{write_no}
	</select>

		<!-- 카테고리 리스트 -->
	<select id="selectInquiryCategory" resultType="Map">
		select 		GRP_ID
				  , CD_ID, CD_NM, CD_NM_EN, CD_NM_CN
				  , CD_VAL, CD_VAL2, CD_VAL3
				  , P_GRP_ID, P_CD_ID, LEVEL
				  , CMMT, DISP_ORD
		from 		CODE
		where		USE_YN = 'Y'
				<foreach collection="grp_ids" item="item" index="index" open="and GRP_ID in (" close=")" separator=",">
					'${item}'
				</foreach> 
		order by GRP_ID, DISP_ORD, CD_NM_EN
	</select>
	
	<!-- (로그인)회원정보 -->
	<select id="selectInquiryCustomerInfo" resultType="CommonMap">
		select CU.*
			, (select CASE WHEN max(CP.VALID_TO_DT) &gt;= NOW() THEN "정회원" ELSE "준회원" END 
			   from CUST_PAY CP where CU.CUST_NO = CP.CUST_NO) MEMBERSHIP_NM
			, (select CASE WHEN max(CP.VALID_TO_DT) &gt;= NOW() THEN "Y" ELSE "N" END 
			    from CUST_PAY CP where CU.CUST_NO = CP.CUST_NO) MEMBERSHIP_YN
			, (select CONCAT('[', GROUP_CONCAT('"', PW.PUSH_WAY_CD, '"'), ']')  
				from CUST_PUSH_WAY PW where PW.CUST_NO = CU.CUST_NO) PUSH_WAY_JSON
			, (select CONCAT('[', GROUP_CONCAT('"', IA.INTE_AREA_CD, '"'), ']') 
				from CUST_INTE_AREA IA where IA.CUST_NO = CU.CUST_NO) INTE_AREA_JSON
		   from CUST CU
		   where JOIN_KIND_CD = 'online'
		   and CU.STAT_CD = 'normal' 
		   and CU.CUST_NO = #{action_user_no}
	</select>
	
	<!-- 첨부파일 -->
	<insert id="insertInquiryWriteFile" parameterType="Map">
	    INSERT INTO BBS_FILE ( 
	    	BBS_ID, 
	    	DOWN_CNT,
	    	FILE_NAME,
			FILE_NAME_ORG,
			FILE_PATH,
			REG_DT,
			SIZE,
			WRITE_NO
		) 
		VALUES (
			'inquiry',
		 	0,
			#{file_name},
			#{file_name_org},
			'${@com.seoulauction.renewal.component.FileManager@moveTempFile(file_path, file_name, 'inquiry')}',
<!-- 			#{file_path}, -->
			now(),
			#{size},
			#{write_no}
		);
	</insert>
	
	<!-- 문의하기 -->
	<insert id="insertInquiryWrite" parameterType="Map" useGeneratedKeys="true" keyProperty="write_no">
	    INSERT INTO BBS_WRITE ( 
	    	BBS_ID,
			CATE_CD,
			CONTENT,
			EMAIL,
			EMP_NO,
			IP,
			NOTICE_YN,
			REG_DT,
			STAT_CD,
			TITLE,
			VIEW_CNT,
			WRITER,
			WRITER_KIND_CD,
			WRITER_NO
		) 
		VALUES (
			'inquiry',
			#{cate_cd},
			#{contents},
			#{email},
			#{emp_no},
			#{action_user_ip},
			'N',
			now(),
			'normal',
			#{inquiry_subject},
			0,
			(SELECT CUST_NAME FROM CUST WHERE CUST_NO = #{action_user_no} LIMIT 1),
			'customer',
			#{action_user_no}
		)
	</insert>

	<!-- 관심정보 sale_list -->
	<sql id="sql_sale_list">
		SELECT
			S1.SALE_NO , S1.SALE_TH, S1.SALE_TH_DSP_YN, S1.TITLE_BLOB, S1.SALE_OUTSIDE_YN, S1.TO_DT, S1.SALE_KIND_CD, S1.CURR_CD
		FROM
			SALE S1
		JOIN CUST_INTE_LOT CIL ON
			S1.SALE_NO = CIL.SALE_NO
		WHERE
			CIL.CUST_NO = #{action_user_no}
			<choose>
				<when test="sale_kind == 'online'">AND (S1.SALE_KIND_CD = 'online' or S1.SALE_KIND_CD = 'online_zb')</when>
				<when test="sale_kind == 'live'">AND IFNULL(S1.SALE_KIND_CD, 'main') != 'online' AND IFNULL(S1.SALE_KIND_CD, 'main') != 'online_zb'</when>
				<otherwise>AND (S1.SALE_KIND_CD = 'online' or S1.SALE_KIND_CD = 'online_zb' or IFNULL(S1.SALE_KIND_CD, 'main') != 'online' AND IFNULL(S1.SALE_KIND_CD, 'main') != 'online_zb')</otherwise>
			</choose>
		GROUP BY S1.SALE_NO
	</sql>
	
	<!-- 관심정보 list-->
	<select id="selectCustInteLotList" resultType="Map">
		SELECT 'INTE_LOT' AS GUBUN
			 , CL.*
		     , CU.CUST_NAME
		     , L.STAT_CD
		     ,	EXPE_PRICE_FROM_BLOB
			 , COLUMN_GET(L.EXPE_PRICE_FROM_BLOB, 'KRW' AS CHAR) AS  EXPE_PRICE_FROM_KO
			 , COLUMN_GET(L.EXPE_PRICE_FROM_BLOB, 'USD' AS CHAR) AS  EXPE_PRICE_FROM_EN
			 , COLUMN_GET(L.EXPE_PRICE_TO_BLOB, 'KRW' AS CHAR) AS  EXPE_PRICE_TO_KO
			 , COLUMN_GET(L.EXPE_PRICE_TO_BLOB, 'USD' AS CHAR) AS  EXPE_PRICE_TO_EN
			 , L.EXPE_PRICE_INQ_YN 
		     , IF(S.SALE_TH_DSP_YN = 'N', '', CONCAT(S.SALE_TH, f_ordinal_number(S.SALE_TH))) AS SALE_TH_DSP
		     , COLUMN_GET(S.TITLE_BLOB, 'ko' AS CHAR) AS SALE_TITLE_KO
		     , COLUMN_GET(S.TITLE_BLOB, 'en' AS CHAR) AS SALE_TITLE_EN
		     , COLUMN_GET(L.TITLE_BLOB, 'ko' AS CHAR) AS TITLE_KO
		     , COLUMN_GET(L.TITLE_BLOB, 'en' AS CHAR) AS TITLE_EN
		     , COLUMN_GET(L.TITLE_BLOB, 'zh' AS CHAR) AS TITLE_ZH
		     , COLUMN_GET(A.ARTIST_NAME_BLOB, 'ko' AS CHAR) AS ARTIST_NAME_KO
		     , COLUMN_GET(A.ARTIST_NAME_BLOB, 'en' AS CHAR) AS ARTIST_NAME_EN
		     , COLUMN_GET(A.ARTIST_NAME_BLOB, 'zh' AS CHAR) AS ARTIST_NAME_ZH	
		     , if(S.TO_DT &gt; NOW(), 'N', 'Y') AS CLOSE_YN
		     , S.SALE_OUTSIDE_YN 
 		     , LI.FILE_NAME
		     , LI.FILE_PATH
		     , S.SALE_KIND_CD
		     , S.CURR_CD
		     , S.TO_DT
		  FROM CUST_INTE_LOT CL INNER JOIN CUST CU ON CL.CUST_NO = CU.CUST_NO
							   INNER JOIN
							   (
							    <include refid="sql_sale_list" />ORDER BY S1.TO_DT DESC LIMIT #{offset}, #{size}
								) S ON S.SALE_NO = CL.SALE_NO
		  						INNER JOIN LOT  L ON CL.SALE_NO = L.SALE_NO AND CL.LOT_NO = L.LOT_NO
		                      	LEFT OUTER JOIN ARTIST A ON L.ARTIST_NO = A.ARTIST_NO
		                      	LEFT OUTER JOIN LOT_IMG LI ON CL.SALE_NO = LI.SALE_NO AND CL.LOT_NO = LI.LOT_NO AND LI.IMG_NO = (SELECT T.IMG_NO FROM LOT_IMG T WHERE T.SALE_NO = L.SALE_NO AND T.LOT_NO = L.LOT_NO ORDER BY T.DISP_ORD LIMIT 1)
							   WHERE CL.CUST_NO =  #{action_user_no}
							   AND L.STAT_CD != 'reentry'
							     ORDER BY S.TO_DT DESC, CL.REG_DT DESC;
	</select>

	<!-- 관심정보 totalcount-->
    <select id="selectCustInteLotCnt" resultType="int">
		SELECT COUNT(*) FROM
			(<include refid="sql_sale_list" />) as sale;
	</select>

	
	<!-- 관심상품 삭제 -->
	<update id="deleteCustInteLot" parameterType="CommonMap">
		 DELETE FROM CUST_INTE_LOT WHERE CUST_NO = #{action_user_no} AND SALE_NO = #{sale_no} AND LOT_NO = #{lot_no};
	</update>
	

	<!-- 라이브 응찰 내역 sale_list -->
	<sql id="sql_live_bid_req_sale_list">
		SELECT S1.SALE_NO,  S1.TITLE_BLOB, S1.FROM_DT, S1.TO_DT, S1.CURR_CD, S1.SALE_TH_DSP_YN, S1.SALE_TH FROM AUTO_BID_REQ AB1
		JOIN SALE S1 ON AB1.SALE_NO = S1.SALE_NO
		AND S1.DEL_YN ='N'
		and AB1.CUST_NO = #{action_user_no}
		join CODE CD on CD.GRP_ID='bid_kind' and AB1.BID_KIND_CD = CD.CD_ID
		where AB1.BID_KIND_CD in ('paper_online', 'phone', 'paper_phone', 'place')
		group by AB1.SALE_NO 
	</sql>
	
	<!-- 라이브경매관리 > 응찰신청 totalcount -->
	<select id="selectLiveBidReqCnt" resultType="int">
	   select COUNT(*) from (
	   <include refid="sql_live_bid_req_sale_list" />
		order by AB1.SALE_NO DESC) S
	</select>
	
	<!-- 라이브경매관리 > 응찰신청 내역 -->
	<select id="selectLiveBidReqList" resultType="Map">
  SELECT *
		    , (
		        SELECT CASE WHEN MB.BID_PRICE = ABL.LAST_AUTOBID_PRICE AND MB.CUST_NO = ABL.CUST_NO THEN '낙찰'
		    	ELSE
		    		CASE WHEN ABL.BID_CNT &gt; 0 THEN '낮은응찰' ELSE '' END
		    	END
				FROM BID MB
				WHERE ABL.SALE_NO = MB.SALE_NO AND ABL.LOT_NO = MB.LOT_NO
			        ORDER BY BID_PRICE DESC, BID_DT, REG_DT LIMIT 1) SUCCESS_YN
			 , ( SELECT B.BID_PRICE  FROM BID B JOIN SUCCESS_BID SB2 ON B.BID_NO = SB2.BID_NO AND ABL.SALE_NO = SB2.SALE_NO AND ABL.LOT_NO = SB2.LOT_NO  ) success_bid_price
		FROM (
			SELECT AB.SALE_NO, AB.LOT_NO, AB.REQ_NO
				, L.EXPE_PRICE_INQ_YN
			    , COLUMN_JSON(S.TITLE_BLOB) TITLE_JSON
			    , DATE_FORMAT(S.FROM_DT, '%Y.%m.%d  %T')  as FROM_DT
			    , DATE_FORMAT(S.FROM_DT, '%d %b, %Y %T') as FROM_DT_EN
			    , DATE_FORMAT(S.TO_DT, '%Y.%m.%d  %H:%i')  as TO_DT
			    , DATE_FORMAT(S.TO_DT, '%d %b, %Y %H:%i')  as TO_DT_EN
			    , S.CURR_CD
			    , IF(S.SALE_TH_DSP_YN = 'N', '', S.SALE_TH) SALE_TH
		  		, IF(S.SALE_TH_DSP_YN = 'N', '', f_ordinal_number(S.SALE_TH)) SALE_TH_DSP
		  		, LI.FILE_PATH as LOT_IMG_PATH
			    , LI.FILE_NAME as LOT_IMG_NAME
			    , AB.BID_PRICE
			    , AB.BID_KIND_CD
			    , DATE_FORMAT(AB.REQ_DT, '%Y.%m.%d %T') as REQ_DT 
			    , DATE_FORMAT(AB.REQ_DT, '%d %b, %Y %T') as REQ_DT_EN
			    , AB.ABORT_YN, AB.ABORT_DT, AB.ABORT_IP, AB.CUST_NO, CD.CD_NM BID_KIND_NM, CD.CD_NM_EN BID_KIND_NM_EN
			    , COLUMN_JSON(L.TITLE_BLOB) W_TITLE_JSON
			    , COLUMN_JSON(A.ARTIST_NAME_BLOB) ARTIST
			    , (SELECT COUNT(*) FROM BID B
					WHERE B.SALE_NO = AB.SALE_NO AND B.LOT_NO = AB.LOT_NO AND B.CUST_NO = AB.CUST_NO AND B.AUTO_BID_REQ_NO = AB.REQ_NO) BID_CNT
			    , (SELECT MAX(BID_PRICE)
					FROM BID LAB
					WHERE AB.SALE_NO = LAB.SALE_NO AND AB.LOT_NO = LAB.LOT_NO AND AB.CUST_NO = LAB.CUST_NO AND LAB.AUTO_BID_REQ_NO = AB.REQ_NO) LAST_AUTOBID_PRICE
				, (SELECT MIN(BID_PRICE)
					FROM BID FAB
					WHERE AB.SALE_NO = FAB.SALE_NO AND AB.LOT_NO = FAB.LOT_NO AND AB.CUST_NO = FAB.CUST_NO AND FAB.AUTO_BID_REQ_NO = AB.REQ_NO) FIRST_AUTOBID_PRICE
				 ,COLUMN_GET(S.TITLE_BLOB, 'ko' AS CHAR) SALE_TITLE_KR
				 ,COLUMN_GET(S.TITLE_BLOB, 'en' AS CHAR) SALE_TITLE_EN
				 ,IFNULL(COLUMN_GET(A.ARTIST_NAME_BLOB, 'ko' AS CHAR), '') ARTIST_NAME_KR
				 ,IFNULL(COLUMN_GET(A.ARTIST_NAME_BLOB, 'en' AS CHAR), '') ARTIST_NAME_EN
				 , COLUMN_GET(L.TITLE_BLOB, 'ko' AS CHAR) LOT_TITLE_KR
				 , COLUMN_GET(L.TITLE_BLOB, 'en' AS CHAR) LOT_TITLE_EN
				 , if(S.TO_DT &gt; NOW(), 'N', 'Y') AS CLOSE_YN
				FROM AUTO_BID_REQ AB
				JOIN (
					<include refid="sql_live_bid_req_sale_list" />
					order by AB1.SALE_NO DESC 
					limit #{offset}, #{size}
				) S ON S.SALE_NO = AB.SALE_NO
				JOIN LOT L ON AB.SALE_NO = L.SALE_NO AND AB.LOT_NO = L.LOT_NO
				JOIN LOT_IMG LI ON LI.SALE_NO = L.SALE_NO AND LI.LOT_NO = L.LOT_NO AND LI.IMG_NO = (SELECT A.IMG_NO FROM LOT_IMG A WHERE A.SALE_NO = L.SALE_NO AND A.LOT_NO = L.LOT_NO ORDER BY A.DISP_ORD LIMIT 1)
				LEFT OUTER JOIN ARTIST A ON L.ARTIST_NO = A.ARTIST_NO
				join CODE CD on CD.GRP_ID='bid_kind' and AB.BID_KIND_CD = CD.CD_ID and  AB.BID_KIND_CD in ('paper_online', 'phone', 'paper_phone', 'place') and AB.CUST_NO = #{action_user_no}
				inner join (select MAX(REQ_NO) REQ_NO , SALE_NO , LOT_NO from AUTO_BID_REQ join CODE CD on CD.GRP_ID='bid_kind' and BID_KIND_CD = CD.CD_ID and  BID_KIND_CD in ('paper_online', 'phone', 'paper_phone', 'place') and CUST_NO = #{action_user_no} group by SALE_NO, LOT_NO ) TAB on TAB.REQ_NO =  AB.REQ_NO
			) ABL
  				order by ABL.REQ_DT DESC
	</select>
	
	<!-- 라이브경매관리 > 응찰신청 내역 > 응찰 팝업-->
	<select id="selectLiveBidReqHistoryList" resultType="Map">
  				select AB.SALE_NO, AB.LOT_NO, AB.REQ_NO 
			    , COLUMN_JSON(S.TITLE_BLOB) TITLE_JSON, S.FROM_DT, S.TO_DT, S.CURR_CD
			    , IF(S.SALE_TH_DSP_YN = 'N', '', S.SALE_TH) SALE_TH
		  		, IF(S.SALE_TH_DSP_YN = 'N', '', f_ordinal_number(S.SALE_TH)) SALE_TH_DSP
		  		, LI.FILE_PATH as LOT_IMG_PATH
			    , LI.FILE_NAME as LOT_IMG_NAME
			    , AB.BID_PRICE, AB.ABORT_YN, AB.ABORT_DT, AB.ABORT_IP, AB.CUST_NO, CD.CD_NM BID_KIND_NM, CD.CD_NM_EN BID_KIND_NM_EN
			    , COLUMN_JSON(L.TITLE_BLOB) W_TITLE_JSON
			    , (select count(*) from BID B 
					where B.SALE_NO = AB.SALE_NO and B.LOT_NO = AB.LOT_NO and B.CUST_NO = AB.CUST_NO and B.AUTO_BID_REQ_NO = AB.REQ_NO) BID_CNT
			    , (select max(BID_PRICE)
					from BID LAB 
					where AB.SALE_NO = LAB.SALE_NO and AB.LOT_NO = LAB.LOT_NO and AB.CUST_NO = LAB.CUST_NO and LAB.AUTO_BID_REQ_NO = AB.REQ_NO) LAST_AUTOBID_PRICE
				, (select MIN(BID_PRICE)
					from BID FAB 
					where AB.SALE_NO = FAB.SALE_NO and AB.LOT_NO = FAB.LOT_NO and AB.CUST_NO = FAB.CUST_NO and FAB.AUTO_BID_REQ_NO = AB.REQ_NO) FIRST_AUTOBID_PRICE
				 ,AB.BID_PRICE 
				,  IF((SELECT B.BID_PRICE  FROM BID B JOIN SUCCESS_BID SB2 on B.BID_NO = SB2.BID_NO
				<if test="sale_no != null and sale_no > 0">
				and SB2.SALE_NO =#{sale_no}
				</if>
				<if test="lot_no != null and lot_no > 0">
				and SB2.LOT_NO = #{lot_no}
				</if>
				and B.CUST_NO = #{action_user_no})
				= AB.BID_PRICE , 'hammer', 'bidding') AS HAMMER_STAT
				, DATE_FORMAT(AB.REQ_DT, '%Y.%m.%d  %T')  as REQ_DT 
				, DATE_FORMAT(AB.REQ_DT, '%d %b, %Y %T')  as REQ_DT_EN
		from AUTO_BID_REQ AB
		join SALE S ON AB.SALE_NO = S.SALE_NO
		join LOT L ON AB.SALE_NO = L.SALE_NO and AB.LOT_NO = L.LOT_NO
		join LOT_IMG LI ON LI.SALE_NO = L.SALE_NO AND LI.LOT_NO = L.LOT_NO AND LI.IMG_NO = (select A.IMG_NO from LOT_IMG A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO order by A.DISP_ORD limit 1)
		join CODE CD on CD.GRP_ID='bid_kind' and AB.BID_KIND_CD = CD.CD_ID
		where AB.BID_KIND_CD  in ('paper_online', 'phone', 'paper_phone', 'place')
		and S.DEL_YN = 'N'
		and AB.CUST_NO = #{action_user_no}
		<if test="sale_no != null and sale_no > 0">
		and S.SALE_NO = #{sale_no} 
		</if>
		<if test="lot_no != null and lot_no > 0">
		and L.LOT_NO = #{lot_no}
		</if>		
		order by AB.REG_DT DESC;
	
	</select>
	
	<!-- 온라인패들 -->
	<sql id="sql_online_paddle">
			WHERE BIO.BID_KIND_CD = 'online' AND BIO.PADDLE &gt; 600  AND BIO.CUST_NO = #{action_user_no}
			AND S.SALE_KIND_CD IN ('main','plan','hongkong') AND S.SALE_NO &gt;= 622 AND S.STAT_CD = 'open'
	</sql>
	
	<!-- 온라인패들 sale_list-->
	<sql id="sql_live_bid_sale_list">
			SELECT
				S.SALE_NO , S.SALE_KIND_CD, S.STAT_CD, S.TITLE_BLOB, S.TO_DT, S.FROM_DT , S.CURR_CD, S.SALE_TH_DSP_YN ,S.SALE_TH
			FROM
				BID_OFFLINE BO
			LEFT OUTER JOIN SALE_PADD PAD ON
				BO.SALE_NO = PAD.SALE_NO
				AND BO.CUST_NO = PAD.CUST_NO
			JOIN SALE S ON BO.SALE_NO = S.SALE_NO
			WHERE BO.BID_KIND_CD = 'online' AND PAD.PADD_NO &gt; 600  AND BO.CUST_NO = #{action_user_no}
			AND S.SALE_KIND_CD IN ('main','plan','hongkong') AND S.SALE_NO &gt;= 622 AND S.STAT_CD = 'open'
			GROUP BY BO.SALE_NO ORDER BY PAD.SALE_NO DESC
	</sql>
	
	<!--라이브경매관리 > 온라인패들응찰내역 -->
	<select id="selectLiveBidList" resultType="Map">
		SELECT S.SALE_NO, L.LOT_NO ,BIO.PADDLE 
				 , DATE_FORMAT(BIO.BID_DT, '%Y.%m.%d  %T')  as BID_DT  
				 , DATE_FORMAT(BIO.BID_DT, '%d %b, %Y %T')  as BID_DT_EN
				 , MBIO.BID_NO, MBIO.BID_PRICE, MBIO.success_bid_price
				 , IF(MBIO.BID_PRICE = MBIO.success_bid_price and MBIO.SUCCESS_CUST_NO = #{action_user_no}, 'hammer', 'bidding' ) AS HAMMER_STAT
				 ,COLUMN_GET(S.TITLE_BLOB, 'ko' AS CHAR) SALE_TITLE_KR
				 ,COLUMN_GET(S.TITLE_BLOB, 'en' AS CHAR) SALE_TITLE_EN
				 ,IFNULL(COLUMN_GET(A.ARTIST_NAME_BLOB, 'ko' AS CHAR), '') ARTIST_NAME_KR
				 ,IFNULL(COLUMN_GET(A.ARTIST_NAME_BLOB, 'en' AS CHAR), '') ARTIST_NAME_EN
				 , COLUMN_GET(L.TITLE_BLOB, 'ko' AS CHAR) LOT_TITLE_KR
				 , COLUMN_GET(L.TITLE_BLOB, 'en' AS CHAR) LOT_TITLE_EN
				 , if(S.TO_DT &gt; NOW(), 'N', 'Y') AS CLOSE_YN
				 , DATE_FORMAT(S.FROM_DT, '%Y.%m.%d  %T')  as FROM_DT 
				 , DATE_FORMAT(S.TO_DT, '%Y.%m.%d  %H:%i')  as TO_DT 
				 , DATE_FORMAT(S.FROM_DT, '%d %b, %Y %T')  as FROM_DT_EN 
				 , DATE_FORMAT(S.TO_DT, '%d %b, %Y %H:%i')  as TO_DT_EN
				 , S.CURR_CD
				 , LI.FILE_PATH as LOT_IMG_PATH
			     , LI.FILE_NAME as LOT_IMG_NAME
			     , (SELECT COUNT(*) FROM SUCCESS_BID SB JOIN BID B ON B.BID_NO= SB.BID_NO AND B.CUST_NO = #{action_user_no} AND SB.SALE_NO= S.SALE_NO) success_bid_count
			     , L.HAMMER_CANCEL_YN
			     , IF(S.SALE_TH_DSP_YN = 'N', '', S.SALE_TH) SALE_TH
		  		 , IF(S.SALE_TH_DSP_YN = 'N', '', f_ordinal_number(S.SALE_TH)) SALE_TH_DSP
		FROM (SELECT PAD.PADD_NO PADDLE, BO.* FROM BID_OFFLINE BO LEFT OUTER JOIN SALE_PADD PAD ON BO.SALE_NO = PAD.SALE_NO AND BO.CUST_NO = PAD.CUST_NO) BIO
		JOIN (
		<include refid="sql_live_bid_sale_list" />
		) S ON BIO.SALE_NO = S.SALE_NO
		INNER JOIN (
		SELECT MAX(BID_PRICE) BID_PRICE, MAX(BIO.BID_NO) BID_NO, BIO.SALE_NO, BIO.LOT_NO
		, (SELECT B.BID_PRICE  FROM BID B JOIN SUCCESS_BID SB2 ON B.BID_NO = SB2.BID_NO AND BIO.SALE_NO = SB2.SALE_NO AND BIO.LOT_NO = SB2.LOT_NO  ) SUCCESS_BID_PRICE 
		, (SELECT B.CUST_NO  FROM BID B JOIN SUCCESS_BID SB2 ON B.BID_NO = SB2.BID_NO AND BIO.SALE_NO = SB2.SALE_NO AND BIO.LOT_NO = SB2.LOT_NO  ) SUCCESS_CUST_NO
		FROM (SELECT PAD.PADD_NO PADDLE, BO.* FROM BID_OFFLINE BO LEFT OUTER JOIN SALE_PADD PAD ON BO.SALE_NO = PAD.SALE_NO AND BO.CUST_NO = PAD.CUST_NO) BIO
		JOIN ( 
		<include refid="sql_live_bid_sale_list" />
			 LIMIT #{offset}, #{size}
		) S ON BIO.SALE_NO = S.SALE_NO 
		<include refid="sql_online_paddle" />
		group by BIO.SALE_NO, BIO.LOT_NO
		order by BIO.SALE_NO desc , BIO.LOT_NO) MBIO on MBIO.SALE_NO = BIO.SALE_NO and MBIO.LOT_NO = BIO.LOT_NO and MBIO.BID_NO = BIO.BID_NO
		LEFT OUTER JOIN LOT L ON BIO.LOT_NO = L.LOT_NO AND BIO.SALE_NO = L.SALE_NO
		join LOT_IMG LI ON LI.SALE_NO = L.SALE_NO AND LI.LOT_NO = L.LOT_NO AND LI.IMG_NO = (select A.IMG_NO from LOT_IMG A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO order by A.DISP_ORD limit 1)
		left outer join ARTIST A ON L.ARTIST_NO = A.ARTIST_NO 
		<include refid="sql_online_paddle" />
		ORDER BY BIO.SALE_NO DESC, BIO.BID_DT DESC
	</select>

	<!--라이브경매관리 > 온라인패들응찰내역 totalcount  -->
	<select id="selectLiveBidCnt" resultType="int">
	    select COUNT(*) from (<include refid="sql_live_bid_sale_list" />) S
	</select>

	<!--라이브경매관리 > 온라인패들응찰내역 > 온라인패들응찰 팝업  -->
	<select id="selectLiveBidHistoryList" resultType="Map">
		SELECT S.SALE_NO, L.LOT_NO ,BIO.PADDLE 
				 , S.CURR_CD
				 , DATE_FORMAT(BIO.BID_DT, '%Y.%m.%d  %T')  as BID_DT  
				 , DATE_FORMAT(BIO.BID_DT, '%d %b, %Y %T')  as BID_DT_EN
				 , BIO.BID_NO, BIO.BID_PRICE
				 ,IF(BIO.BID_PRICE = (SELECT B.BID_PRICE FROM BID B JOIN SUCCESS_BID SB2 ON B.BID_NO = SB2.BID_NO
				<if test="sale_no != null and sale_no > 0">
				and SB2.SALE_NO = #{sale_no}
				</if>
				<if test="lot_no != null and lot_no > 0">
				and SB2.LOT_NO = #{lot_no}
				</if>
				and B.CUST_NO = #{action_user_no})
				 , 'hammer', 'bidding' ) AS HAMMER_STAT
		FROM (SELECT PAD.PADD_NO PADDLE, BO.* FROM BID_OFFLINE BO LEFT OUTER JOIN SALE_PADD PAD ON BO.SALE_NO = PAD.SALE_NO AND BO.CUST_NO = PAD.CUST_NO) BIO
		JOIN SALE S ON BIO.SALE_NO = S.SALE_NO
		LEFT OUTER JOIN LOT L ON BIO.LOT_NO = L.LOT_NO AND BIO.SALE_NO = L.SALE_NO
		JOIN LOT_IMG LI ON LI.SALE_NO = L.SALE_NO AND LI.LOT_NO = L.LOT_NO AND LI.IMG_NO = (SELECT A.IMG_NO FROM LOT_IMG A WHERE A.SALE_NO = L.SALE_NO AND A.LOT_NO = L.LOT_NO ORDER BY A.DISP_ORD LIMIT 1)
		left outer join ARTIST A ON L.ARTIST_NO = A.ARTIST_NO 
		<include refid="sql_online_paddle" />
		<if test="sale_no != null and sale_no > 0">
		and S.SALE_NO = #{sale_no} 
		</if>
		<if test="lot_no != null and lot_no > 0">
		and L.LOT_NO = #{lot_no}
		</if>
		ORDER BY BIO.SALE_NO DESC, BIO.LOT_NO ASC, BIO.BID_DT DESC, BIO.BID_PRICE DESC;
	</select>

	<!--라이브경매관리 > 온라인패들응찰내역 > 낙찰결과통보서 팝업 -->
	<select id="selectLiveBidHammerList" resultType="Map">
	select
		B.*, LF.*
		, COLUMN_GET(S.TITLE_BLOB, 'ko' AS CHAR) SALE_TITLE_KR
		, COLUMN_GET(S.TITLE_BLOB, 'en' AS CHAR) SALE_TITLE_EN
		, IFNULL(COLUMN_GET(AL.ARTIST_NAME_BLOB, 'ko' AS CHAR), '') ARTIST_NAME_KR
		, IFNULL(COLUMN_GET(AL.ARTIST_NAME_BLOB, 'en' AS CHAR), '') ARTIST_NAME_EN
		, COLUMN_GET(AL.TITLE_BLOB, 'ko' AS CHAR) LOT_TITLE_KR
		, COLUMN_GET(AL.TITLE_BLOB, 'en' AS CHAR) LOT_TITLE_EN
		,(LF.FEE + B.BID_PRICE) as PAY_PRICE
		, LI.*
		FROM
			SUCCESS_BID SB
		JOIN BID B ON
			SB.BID_NO = B.BID_NO
			AND SB.SALE_NO = B.SALE_NO
			and B.CUST_NO = #{action_user_no}
			<if test="sale_no != null and sale_no > 0">
			and B.SALE_NO = #{sale_no}
			</if>
		left outer join LOT_FEE LF on
				LF.SALE_NO = SB.SALE_NO
				and LF.LOT_NO = SB.LOT_NO
				and LF.FEE_KIND_CD = 'payment'
		left outer join (
		SELECT A.ARTIST_NO, A.ARTIST_NAME_BLOB, L.TITLE_BLOB, L.LOT_NO , L.SALE_NO  FROM ARTIST A JOIN LOT L ON A.ARTIST_NO = L.ARTIST_NO
		) AL ON AL.LOT_NO = B.LOT_NO AND AL.SALE_NO = B.SALE_NO
		LEFT OUTER JOIN SALE S ON S.SALE_NO =  B.SALE_NO
		JOIN LOT_IMG LI ON LI.SALE_NO = AL.SALE_NO AND LI.LOT_NO = AL.LOT_NO AND LI.IMG_NO = (SELECT A.IMG_NO FROM LOT_IMG A WHERE A.SALE_NO = AL.SALE_NO AND A.LOT_NO = AL.LOT_NO ORDER BY A.DISP_ORD LIMIT 1)
		ORDER BY AL.LOT_NO
	</select>
	
	<!--라이브경매관리 > 온라인패들응찰내역 > 낙찰결과통보서 totalcount -->
	<select id="selectLiveBidHammerCnt"  resultType="CommonMap">
		select
			TA.*,
			(TA.sum_fee + TA.sum_bid_price) as sum_total_price
		from
			(
			select
				COUNT(*) as tatal_count,
				SUM(LF.FEE) sum_fee,
				SUM(B.BID_PRICE) sum_bid_price
			from
						SUCCESS_BID SB
			JOIN BID B ON
						SB.BID_NO = B.BID_NO
				AND SB.SALE_NO = B.SALE_NO
				AND B.CUST_NO = #{action_user_no}
				<if test="sale_no != null and sale_no > 0">
				AND B.SALE_NO = #{sale_no}
				</if>
			LEFT OUTER JOIN LOT_FEE LF ON
							LF.SALE_NO = SB.SALE_NO
				AND LF.LOT_NO = SB.LOT_NO
				and LF.FEE_KIND_CD = 'payment'
			) TA 
	</select>
	
	<!--온라인경매관리 응찰내역 sale_list-->
	<sql id="sql_online_bid_sale_list">
			SELECT S1.*
		    FROM  SALE S1 
		    JOIN (
				SELECT SB.*, SCD.CD_NM BID_KIND_NM FROM BID SB
				JOIN CODE SCD ON SB.BID_KIND_CD = SCD.CD_ID AND SCD.GRP_ID = 'bid_kind'
				WHERE SB.BID_KIND_CD IN ('online_once', 'online_auto')
			) B ON S1.SALE_NO = B.SALE_NO 
	 		WHERE B.CUST_NO = #{action_user_no}
			GROUP BY S1.SALE_NO
			ORDER BY S1.SALE_NO DESC 
	</sql>
	
	<!-- 온라인경매관리 > 응찰내역  -->
	<select id="selectOnlineBidList" resultType="Map">
		select S.SALE_NO, IF(S.SALE_TH_DSP_YN = 'N', '', CONCAT(S.SALE_TH, f_ordinal_number(S.SALE_TH))) SALE_TH, COLUMN_JSON(S.TITLE_BLOB) TITLE_JSON
			, DATE_FORMAT(S.FROM_DT, '%Y.%m.%d  %T')  as FROM_DT 
			, DATE_FORMAT(S.FROM_DT, '%d %b, %Y %T')  as FROM_DT_EN 
			, DATE_FORMAT(S.TO_DT, '%Y.%m.%d  %H:%i')  as TO_DT 
			, DATE_FORMAT(S.TO_DT, '%d %b, %Y %H:%i')  as TO_DT_EN 
			, S.CURR_CD
			, L.LOT_NO, L.ARTIST_NO, L.STAT_CD
			, COLUMN_JSON(L.TITLE_BLOB) LOT_TITLE_JSON
			, (select CONCAT(LI.FILE_PATH, "/", LI.FILE_NAME) from LOT_IMG LI 
				where LI.SALE_NO = L.SALE_NO and LI.LOT_NO = L.LOT_NO limit 1) LOT_IMG
			, CAST(COLUMN_JSON(A.ARTIST_NAME_BLOB) AS CHAR) ARTIST_NAME_JSON
			, (select CASE WHEN MB.CUST_NO = B.CUST_NO and L.TO_DT &lt; now() THEN 'Y' ELSE 'N' END 
				from BID MB where B.SALE_NO = MB.SALE_NO and B.LOT_NO = MB.LOT_NO order by MB.BID_PRICE desc, MB.BID_DT limit 1) SUCCESS_YN 
			, (select MB.BID_DT from BID MB where B.SALE_NO = MB.SALE_NO and B.LOT_NO = MB.LOT_NO order by MB.BID_PRICE desc, MB.BID_DT limit 1) SUCCESS_BID_DT
			, COUNT(*) BID_CNT
			, CONCAT('['
			, GROUP_CONCAT('{"BID_PRICE":', B.BID_PRICE, ', "BID_DT":"',  DATE_FORMAT(B.BID_DT, '%Y.%m.%d  %T'), '", "BID_DT_EN":"',  DATE_FORMAT(B.BID_DT, '%d %b, %Y %T'),'", "BID_NO":"', B.BID_NO, '"}' order by B.BID_PRICE desc, B.BID_DT)
			, ']') BID_JSON
			, B.BID_PRICE
			, B.BID_KIND_NM
			,  (SELECT B.BID_PRICE  FROM BID B JOIN SUCCESS_BID SB2 ON B.BID_NO = SB2.BID_NO AND S.SALE_NO = SB2.SALE_NO AND L.LOT_NO = SB2.LOT_NO  ) success_bid_price
			,  (SELECT B.BID_NO  FROM BID B JOIN SUCCESS_BID SB2 ON B.BID_NO = SB2.BID_NO AND S.SALE_NO = SB2.SALE_NO AND L.LOT_NO = SB2.LOT_NO  ) success_bid_no
			 ,COLUMN_GET(S.TITLE_BLOB, 'ko' AS CHAR) SALE_TITLE_KR
			 ,COLUMN_GET(S.TITLE_BLOB, 'en' AS CHAR) SALE_TITLE_EN
			 ,IFNULL(COLUMN_GET(A.ARTIST_NAME_BLOB, 'ko' AS CHAR), '') ARTIST_NAME_KR
			 ,IFNULL(COLUMN_GET(A.ARTIST_NAME_BLOB, 'en' AS CHAR), '') ARTIST_NAME_EN
			 , COLUMN_GET(L.TITLE_BLOB, 'ko' AS CHAR) LOT_TITLE_KR
			 , COLUMN_GET(L.TITLE_BLOB, 'en' AS CHAR) LOT_TITLE_EN
			 , if(L.TO_DT &gt; NOW(), 'N', 'Y') AS CLOSE_YN
			 , L.HAMMER_CANCEL_YN
			 , (SELECT DATE_FORMAT(BID_DT, '%Y.%m.%d  %T') FROM BID B WHERE B.CUST_NO=#{action_user_no} AND B.SALE_NO = S.SALE_NO AND B.LOT_NO=L.LOT_NO ORDER BY BID_DT DESC LIMIT 1) MAX_BID_DT
			 , (SELECT DATE_FORMAT(BID_DT, '%d %b, %Y %T') FROM BID B WHERE B.CUST_NO=#{action_user_no} AND B.SALE_NO = S.SALE_NO AND B.LOT_NO=L.LOT_NO ORDER BY BID_DT DESC LIMIT 1) MAX_BID_DT_EN
			 , (SELECT BID_PRICE FROM BID B WHERE B.CUST_NO=#{action_user_no} AND B.SALE_NO = S.SALE_NO AND B.LOT_NO=L.LOT_NO ORDER BY BID_DT DESC, BID_PRICE DESC LIMIT 1) MAX_BID_PRICE
	    from LOT L
		inner join (
			select SB.*, SCD.CD_NM BID_KIND_NM from BID SB
			join CODE SCD on SB.BID_KIND_CD = SCD.CD_ID and SCD.GRP_ID = 'bid_kind'
			where SB.BID_KIND_CD in ('online_once', 'online_auto') 
		) B on L.SALE_NO = B.SALE_NO and L.LOT_NO = B.LOT_NO and B.CUST_NO = #{action_user_no}
		right join (
		<include refid="sql_online_bid_sale_list"/>
		LIMIT #{offset}, #{size}
		) S ON L.SALE_NO = S.SALE_NO 
		LEFT JOIN ARTIST A ON L.ARTIST_NO = A.ARTIST_NO
		GROUP BY L.SALE_NO, L.LOT_NO
		ORDER BY L.SALE_NO DESC, MAX_BID_DT DESC
	</select>
	
	<!-- 온라인경매관리 > 응찰내역 totalcount -->
	<select id="selectOnlineBidCnt" resultType="int">
		select COUNT(*)	from 
		(<include refid="sql_online_bid_sale_list"/> ) S
	</select>
	
	<!-- 온라인경매관리 > 응찰내역 > 응찰내역 팝업 -->
	<select id="selectOnlineBidHistoryList" resultType="Map">
		select S.SALE_NO, L.LOT_NO, B.BID_NO , B.BID_KIND_NM, B.BID_KIND_NM_EN, B.BID_PRICE
				, DATE_FORMAT(B.BID_DT, '%Y.%m.%d  %T')  as BID_DT
				, DATE_FORMAT(B.BID_DT, '%d %b, %Y %T')  as BID_DT_EN 
				,  IF((SELECT B.BID_PRICE  FROM BID B JOIN SUCCESS_BID SB2 ON B.BID_NO = SB2.BID_NO
				<if test="sale_no != null and sale_no > 0">
				and SB2.SALE_NO = #{sale_no}
				</if>
				<if test="lot_no != null and lot_no > 0">
				and SB2.LOT_NO = #{lot_no}
				</if>
				and B.CUST_NO = #{action_user_no})
				= B.BID_PRICE , 'hammer', 'bidding') AS HAMMER_STAT
				, ABR.ABORT_YN
				, S.CURR_CD
				,(SELECT BID_PRICE  FROM AUTO_BID_REQ ABR WHERE SALE_NO = #{sale_no} AND LOT_NO = #{lot_no} AND CUST_NO = #{action_user_no} ORDER BY REG_DT DESC LIMIT 1 ) AUTO_BID_PRICE
	    from LOT L
		inner join SALE S on L.SALE_NO = S.SALE_NO 
		inner join (
			select SB.*, SCD.CD_NM BID_KIND_NM, SCD.CD_NM_EN BID_KIND_NM_EN from BID SB
			join CODE SCD on SB.BID_KIND_CD = SCD.CD_ID and SCD.GRP_ID = 'bid_kind'
			where SB.BID_KIND_CD in ('online_once', 'online_auto') 
		) B ON L.SALE_NO = B.SALE_NO AND L.LOT_NO = B.LOT_NO
		LEFT OUTER JOIN AUTO_BID_REQ ABR ON B.AUTO_BID_REQ_NO = ABR.REQ_NO
		where
		B.CUST_NO = #{action_user_no}
		<if test="sale_no != null and sale_no > 0">
		and S.SALE_NO = #{sale_no} 
		</if>
		<if test="lot_no != null and lot_no > 0">
		and L.LOT_NO = #{lot_no}
		</if>	
		order by B.BID_DT DESC, B.BID_PRICE DESC
	</select>
	
	<select id="selectCustForChkPassword" resultType="CommonMap">
		SELECT *
		FROM   CUST
		WHERE  1 = 1
			AND CUST_NO = #{cust_no}
		    AND passwd = '${@com.seoulauction.renewal.auth.PasswordEncoderAESforSA@saPasswdEncoding(passwd)}'
	</select>
	
	<update id="updateCustPasswdByCustNo"
		parameterType="CommonMap">
		update cust
		set
		PASSWD = '${@com.seoulauction.renewal.auth.PasswordEncoderAESforSA@saPasswdEncoding(passwd)}',
		PASSWD_MOD_DT = now(),
		LOGIN_FAIL_CNT = 0
		where CUST_NO = #{cust_no}
	</update>
	
	<select id="selectCustSocialByCustNo" resultType="CommonMap">
		select
			CUST_NO, SOCIAL_TYPE, SOCIAL_EMAIL,date_format(REG_DT,'%Y.%m.%d')REG_DT
		from
			CUST_SOCIAL
		where
			CUST_NO = #{cust_no}
	</select>
	
	<delete id="deleteCustSocial" parameterType="CommonMap">
		delete
		from
			CUST_SOCIAL
		where
			CUST_NO = #{cust_no}
			and SOCIAL_TYPE = #{social_type}
	</delete>
	
	<select id="selectCustInteArtist" resultType="CommonMap">
	    select CIA.ARTIST_NO, CIA.CUST_NO
			, COLUMN_JSON(A.ARTIST_NAME_BLOB) ARTIST_NAME_JSON
		from CUST_INTE_ARTIST CIA
		join ARTIST A on A.ARTIST_NO = CIA.ARTIST_NO
	    and CIA.CUST_NO = #{cust_no}
	</select>
	
	<select id="selectArtistByArtistName" resultType="CommonMap">
		select * from(
		    select ARTIST_NO
		    	, COLUMN_GET(ARTIST_NAME_BLOB, 'ko' AS CHAR) AS ARTIST_NM_KO
		    	, COLUMN_GET(ARTIST_NAME_BLOB, 'en' AS CHAR) AS ARTIST_NM_EN
		    	, BORN_YEAR 
		    	, DIE_YEAR  
		    from ARTIST A
		)TMP
		where 1 = 1
			and TMP.ARTIST_NM_KO like concat('%', #{find_word}, '%')
			or TMP.ARTIST_NM_EN like concat('%', #{find_word}, '%')
	</select>
	
	<update id="updateCust" parameterType="CommonMap">
		UPDATE CUST 
	    SET 
	    	<if test="user_kind == 'person'"> <!-- 개인 -->
				BORN_DT = #{born_dt},
				SEX_CD = #{sex_cd},
			</if>
			
			HP = #{hp},
			EMAIL = #{email},
			
			ZIPNO = #{zipno},
	    	ADDR = #{addr},
			ADDR_DTL = #{addr_dtl},
			<if test="addr_old_yn != null and addr_old_yn != ''">
				ADDR_OLD_YN = #{addr_old_yn},
			</if>
			
			DELI_ZIPNO = #{deli_zipno},
			<if test="deli_addr_old_yn != null and deli_addr_old_yn != ''">
				DELI_ADDR_OLD_YN = #{deli_addr_old_yn},
			</if>
			DELI_ADDR = #{deli_addr},
			DELI_ADDR_DTL = #{deli_addr_dtl},
			DELI_RET_YN = 'N',
			
			<if test="user_kind != 'person'"> <!-- 사업자 -->
				COMP_MAN_NAME = #{comp_man_name},
				COMP_OWNER = #{comp_owner},
				COMP_NO = #{comp_no},
				TEL = #{tel},
			</if>
			
			<if test="local_kind_cd == 'foreigner'"> <!-- 해외 -->
				NATION_CD = #{nation_cd},
			</if>
			MOD_DT = now()
		where CUST_NO = #{cust_no}
	</update>
	
	<update id="deleteCustPushWay" parameterType="CommonMap">
		delete from CUST_PUSH_WAY where CUST_NO = #{cust_no}
	</update>
	
	<update id="deleteCustInteArtist" parameterType="CommonMap">
		delete from CUST_INTE_ARTIST where CUST_NO = #{cust_no}
	</update>
	
	<update id="deleteCustInteArea" parameterType="CommonMap">
		delete from CUST_INTE_AREA where CUST_NO = #{cust_no}
	</update>
	
	<insert id="insertCustPushWay" parameterType="CommonMap">
		INSERT INTO CUST_PUSH_WAY ( 
			CUST_NO,
			PUSH_WAY_CD,
			REG_DT
		) 
		VALUES (
			#{cust_no},
			#{push_way_cd},
			now()
		)
	</insert>
	
	<insert id="insertCustInteArtist" parameterType="CommonMap">
		INSERT INTO CUST_INTE_ARTIST ( 
			CUST_NO,
			ARTIST_NO,
			REG_DT
		) 
		VALUES (
			#{cust_no},
			#{artist_no},
			now()
		)
	</insert>
	
	<insert id="insertCustInteArea" parameterType="CommonMap">
		INSERT INTO CUST_INTE_AREA ( 
			CUST_NO,
			INTE_AREA_CD,
			REG_DT
		) 
		VALUES (
			#{cust_no},
			#{inte_area_cd},
			now()
		)
	</insert>
	
	<update id="deleteCust" parameterType="CommonMap">
		UPDATE CUST 
	    SET 
	    	STAT_CD = 'leave', LEAVE_DT = now()
		where CUST_NO = #{cust_no}
	</update>
	
	<update id="updateCustSendInfoNew" parameterType="CommonMap">
		update CUST_SEND_INFO_NEW
		set
			DEL_YN = 'Y', MOD_DT = now()
		where CUST_NO = #{cust_no}
			and DEL_YN = 'N';
	</update>
	
	<select id="selectBidForCustLeave" resultType="CommonMap">
		SELECT
			B.CUST_NO, B.SALE_NO, B.LOT_NO, L.TO_DT
		FROM
			BID B
		JOIN
			LOT L
		ON B.SALE_NO = L.SALE_NO AND B.LOT_NO = L.LOT_NO
		where 
			CUST_NO = #{cust_no}
			and l.TO_DT > now()
	</select>
	
	<select id="selectAutoBidReqForcustLeave" resultType="CommonMap">
		SELECT
			ABR.CUST_NO, ABR.SALE_NO, ABR.LOT_NO, L.TO_DT
		FROM
			AUTO_BID_REQ ABR
		JOIN
			LOT L
		ON ABR.SALE_NO = L.SALE_NO AND ABR.LOT_NO = L.LOT_NO
		WHERE
			CUST_NO = #{cust_no}
			and L.TO_DT > now()
	</select>

	<select id="selectManager" resultType="CommonMap" parameterType="CommonMap">
		SELECT E.EMP_NAME, E.HP, E.TEL, D.DEPT_NAME, D.DEPT_NAME_EN
		FROM CUST CU
				 LEFT OUTER JOIN EMP E ON E.EMP_NO = CU.EMP_NO
				 LEFT OUTER JOIN DEPT D ON D.DEPT_NO = E.DEPT_NO
		WHERE CU.STAT_CD = 'normal'
		  AND CU.CUST_NO =  #{cust_no}
		  AND CU.JOIN_KIND_CD = 'online'
	</select>
</mapper>