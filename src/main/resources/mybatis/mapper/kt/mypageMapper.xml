<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seoulauction.renewal.mapper.kt.MypageMapper">	
	
	<!-- 아카데미 list -->
	<select id="selectAcademyList" resultType="Map">
		SELECT A.CUST_NAME , 
		A.EMAIL , 
		A.HP, 
		B.REG_DT , 
		C.ACADEMY_PAY, 
		C.ACADEMY_PAY1,
		C.ACADEMY_PAY2,
		C.ACADEMY_PAY3,
		COLUMN_JSON(C.TITLE_BLOB) TITLE_JSON,
		COLUMN_GET(C.TITLE_BLOB, 'ko' AS CHAR) TITLE_KO,
		COLUMN_GET(C.TITLE_BLOB, 'en' AS CHAR) TITLE_EN,
		C.ACADEMY_NO
		FROM CUST A , ACADEMY_REQ B , ACADEMY C
		WHERE A.CUST_NO = B.CUST_NO AND B.ACADEMY_NO = C.ACADEMY_NO AND A.CUST_NO = #{cust_no} AND B.DEL_YN = 'N'
		order by B.REG_DT desc
		limit #{offset}, #{size}
	</select>
	
	<select id="selectAcademyCnt" resultType="int">
		SELECT 
		COUNT(*)	     ROW_CNT
		FROM CUST A , ACADEMY_REQ B , ACADEMY C
		WHERE A.CUST_NO = B.CUST_NO AND B.ACADEMY_NO = C.ACADEMY_NO AND A.CUST_NO = #{cust_no} AND B.DEL_YN = 'N'
	</select>
	
	<!-- 아카데미 결제정보 -->
	<select id="selectAcademyPayInfo" resultType="CommonMap">
	select 		
		ACADEMY_PAY , 
		ACADEMY_PAY1 ,
		ACADEMY_PAY2 ,
		ACADEMY_PAY3 
	from
		ACADEMY 
		where ACADEMY_NO = #{academy_no}
	</select>
	
	<!-- 결제관리 -->
	<sql id="sql_pay_list">
	 select S.SALE_NO, IF(S.SALE_TH_DSP_YN = 'N', '', CONCAT(S.SALE_TH, f_ordinal_number(S.SALE_TH))) SALE_TH, COLUMN_JSON(S.TITLE_BLOB) TITLE_JSON
	   	, COLUMN_GET(S.TITLE_BLOB, 'ko' AS CHAR) SALE_TITLE_KR
	   	, S.FROM_DT, S.TO_DT, S.CURR_CD
		, L.LOT_NO, L.ARTIST_NO, L.REAL_CUST_NO, L.PAYMENT_FEE_SET_CD
		, COLUMN_JSON(L.TITLE_BLOB) LOT_TITLE_JSON
		, COLUMN_GET(L.TITLE_BLOB, 'ko' AS CHAR) LOT_TITLE_KR
		, (select CONCAT(LI.FILE_PATH, "/", LI.FILE_NAME) from LOT_IMG LI 
			where LI.SALE_NO = L.SALE_NO and LI.LOT_NO = L.LOT_NO limit 1) LOT_IMG
		, CAST(COLUMN_JSON(A.ARTIST_NAME_BLOB) AS CHAR) ARTIST_NAME_JSON
		, IFNULL(COLUMN_GET(A.ARTIST_NAME_BLOB, 'ko' AS CHAR), '') ARTIST_NAME_KR
		, CONCAT('[', GROUP_CONCAT('{"PRICE_FROM":', ifnull(LF.PRICE_FROM, 0), ', "PRICE_TO":', ifnull(LF.PRICE_TO, 0) , ', "RATE":', ifnull(LF.RATE, 0.0), '}'), ']') LOT_FEE_JSON
		, B.BID_PRICE, B.BID_DT, B.CUST_NO BID_CUST_NO, B.RANK
		, P.CUST_NO PAY_CUST_NO
		, P.PAY_METHOD_NM, PAY_CNT
		, P.PAY_PRICE
		, case when P.CUST_NO is null then 0 else 1 end PAID_CNT
		, if((select count(*) from CUST_BASE_FEE where CUST_NO = '1' and FEE_KIND_CD = 'payment') = 0, 'N', 'Y') CUST_FEE_YN
		from LOT L
		join SALE S on L.SALE_NO = S.SALE_NO
		left outer join ARTIST A on L.ARTIST_NO = A.ARTIST_NO
		left outer join LOT_FEE LF on LF.SALE_NO = L.SALE_NO and LF.LOT_NO = L.LOT_NO and LF.FEE_KIND_CD = 'payment'
		left outer join (
			select RB.* from (
				select
					B.*
					, case when @val = concat(B.SALE_NO, '_', B.LOT_NO)
						then (@rownum:=@rownum+1) else @rownum:=1 end RANK
				, @val:=concat(B.SALE_NO, '_', B.LOT_NO)
				from BID B,(select @val:='', @rownum := 0) R
				where B.BID_KIND_CD in ('online_once', 'online_auto')
				order by B.SALE_NO desc, B.LOT_NO, B.BID_PRICE desc, B.BID_DT
			) RB where RB.RANK = 1
		) B on B.SALE_NO = L.SALE_NO and B.LOT_NO = L.LOT_NO
		left outer join (
			select SP.CUST_NO, sum(SP.PAY_PRICE) PAY_PRICE, LP.SALE_NO, LP.LOT_NO, C.CD_NM PAY_METHOD_NM, count(*) PAY_CNT
			from PAY SP
			join LOT_PAY LP on LP.PAY_NO = SP.PAY_NO and LP.FEE_KIND_CD = 'payment'
			join CODE C on SP.PAY_METHOD_CD = C.CD_ID and C.GRP_ID = 'pay_method'
			group by LP.SALE_NO, LP.LOT_NO
		) P on P.SALE_NO = L.SALE_NO and P.LOT_NO = L.LOT_NO
		where L.TO_DT &lt;= NOW()
		and (B.CUST_NO = '1' and REAL_CUST_NO is null) or REAL_CUST_NO = '1'
		and (P.CUST_NO = null or (B.CUST_NO = '1' and REAL_CUST_NO is null) or REAL_CUST_NO = '1')
		group by L.SALE_NO, L.LOT_NO
	</sql>
	
	<select id="selectPayCountByCustNo" resultType="CommonMap">
	    select count(*) ROW_CNT, SUM(PAID_CNT) PAID_CNT from (
			<include refid="sql_pay_list" />
		) RESULT
	</select>
		
	<select id="selectPayListByCustNo" resultType="Map">
		<include refid="sql_pay_list" />
		order by S.SALE_NO DESC
		limit #{offset}, #{size}
	</select>
	
	<select id="selectCustomerByCustNo" resultType="Map">
		select CU.*
			, (select CASE WHEN max(CP.VALID_TO_DT) >= NOW() THEN "정회원" ELSE "준회원" END 
			   from CUST_PAY CP where CU.cust_no = CP.cust_no) MEMBERSHIP_NM
			, (select CASE WHEN max(CP.VALID_TO_DT) >= NOW() THEN "Y" ELSE "N" END 
			    from CUST_PAY CP where CU.cust_no = CP.cust_no) MEMBERSHIP_YN
			, (select CONCAT('[', GROUP_CONCAT('"', PW.PUSH_WAY_CD, '"'), ']')  
				from CUST_PUSH_WAY PW where PW.CUST_NO = CU.CUST_NO) PUSH_WAY_JSON
			, (select CONCAT('[', GROUP_CONCAT('"', IA.INTE_AREA_CD, '"'), ']') 
				from CUST_INTE_AREA IA where IA.CUST_NO = CU.CUST_NO) INTE_AREA_JSON
		   from CUST CU
		   where JOIN_KIND_CD = 'online'
		   and CU.STAT_CD = 'normal' 
		   and CU.CUST_NO = #{action_user_no}
	</select>
	
	<select id="selectSaleListByCustNo" resultType="Map">
	select concat(year(S.TO_DT),'-',if (month(S.TO_DT) &lt; 10, concat('0',month(S.TO_DT)), month(S.TO_DT))) as saleMonth
		from LOT L
		join SALE S on L.SALE_NO = S.SALE_NO
		left outer join LOT_FEE LF on LF.SALE_NO = L.SALE_NO and LF.LOT_NO = L.LOT_NO and LF.FEE_KIND_CD = 'payment'
		left outer join (
			select RB.* from (
				select
					B.*
					, case when @val = concat(B.SALE_NO, '_', B.LOT_NO)
						then (@rownum:=@rownum+1) else @rownum:=1 end RANK
				, @val:=concat(B.SALE_NO, '_', B.LOT_NO)
				from BID B,(select @val:='', @rownum := 0) R
				where B.BID_KIND_CD in ('online_once', 'online_auto')
				order by B.SALE_NO desc, B.LOT_NO, B.BID_PRICE desc, B.BID_DT
			) RB where RB.RANK = 1
		) B on B.SALE_NO = L.SALE_NO and B.LOT_NO = L.LOT_NO
		left outer join (
			select SP.CUST_NO, sum(SP.PAY_PRICE) PAY_PRICE, LP.SALE_NO, LP.LOT_NO, C.CD_NM PAY_METHOD_NM, count(*) PAY_CNT
			from PAY SP
			join LOT_PAY LP on LP.PAY_NO = SP.PAY_NO and LP.FEE_KIND_CD = 'payment'
			join CODE C on SP.PAY_METHOD_CD = C.CD_ID and C.GRP_ID = 'pay_method'
			group by LP.SALE_NO, LP.LOT_NO
		) P on P.SALE_NO = L.SALE_NO and P.LOT_NO = L.LOT_NO
		where L.TO_DT &lt;= NOW()
		and (B.CUST_NO = '1' and REAL_CUST_NO is null) or REAL_CUST_NO = '1'
		and (P.CUST_NO = null or (B.CUST_NO = '1' and REAL_CUST_NO is null) or REAL_CUST_NO = '1')
	group by L.SALE_NO
	order by S.TO_DT DESC;
	</select>
	

	<!--본인인증  -->
	<select id="selectSaleCertByCustHp" resultType="CommonMap">
		SELECT
		    *
		FROM
		     SALE_CERT
		WHERE
		    DEL_YN = 'N'
		  	and HP = #{to_phone}
		  	and SALE_NO = #{sale_no}
		LIMIT
			1
	</select>
	
	
	<select id="selectAuthNumber" resultType="CommonMap">
	    set @rand_num := CAST(FLOOR(100000 + RAND() * 899999) AS unsigned integer);
	   	insert into SC_TRAN(
			TR_PHONE,
			TR_CALLBACK,
			TR_MSG,
			TR_SENDDATE
		)
		values(
			#{to_phone},
			#{from_phone},
			replace('${msg}', '##rand_num##', @rand_num),
			now()
		);
	    select @rand_num as AUTH_NUM
	</select>
	
	<insert id="inertSaleCert" parameterType="Map" useGeneratedKeys="true" keyProperty="sale_cert_no">
		insert into SALE_CERT (SALE_NO, CUST_NO, HP, CUST_HP, DONE_CD, REG_DT, REG_EMP_NO)
		VALUES (
			#{sale_no}, 
			#{action_user_no}, 
			#{to_phone},
			(select max(A.HP) from CUST A where A.CUST_NO = #{action_user_no}),
			#{done_cd},
			now(),
			#{action_user_no}
		);
	</insert>	
	
	<update id="updateSaleCertHp">
		update CUST set HP = #{hp} where CUST_NO = #{action_user_no};
		update SALE_CERT set DONE_CD='modify' where	SALE_CERT_NO = #{sale_cert_no};
	</update>	

	<!-- 문의 리스트 -->
	<sql id="sql_bbs_w_list">
		select * from (
		    select
			    A.*,
			    CASE WHEN C.P_CD_NM IS NULL THEN '' ELSE C.CD_NM END AS CATE_NM,
			    CASE WHEN C.P_CD_NM IS NULL THEN C.CD_NM ELSE C.P_CD_NM END AS P_CATE_NM,
				case when B.reply_cnt > 0 then 'Y' else 'N' end as REPLY_YN,
				B.LAST_REPLY_DT, 
				D.EMP_NAME
			from BBS_WRITE A
			left outer join (
				select bbs_id, write_no, count(*) REPLY_CNT, max(reg_dt) LAST_REPLY_DT from BBS_REPLY group by bbs_id, write_no
			) B ON A.bbs_id = B.bbs_id and A.write_no = B.write_no
			left outer join (
				select distinct CA.CD_ID, CA.CD_NM, CC.CD_ID P_CD_ID, CC.CD_NM P_CD_NM from CODE CA 
				join CODE_GRP CB on CA.grp_id = CB.grp_id
				left outer join CODE CC on CA.P_cd_id = CC.cd_id
				where CA.grp_id = 'bbs_inquiry_category'
				and CA.use_yn = 'Y'
			) C on A.cate_cd = C.cd_id
			left outer join EMP D on A.EMP_NO = D.EMP_NO
			where A.writer_no = #{action_user_no}
			<if test="emp_read_yn != null and emp_read_yn != ''">
			    and A.EMP_READ_YN = #{emp_read_yn}
		    </if>
		) Z
		where 1=1
	    <if test="complet_yn != null and complet_yn != ''">
	       and Z.reply_yn = #{complet_yn}
	    </if>
	</sql>
	<select id="selectInquiryList" resultType="Map">
	    <include refid="sql_bbs_w_list" />
    	and	BBS_ID='inquiry' and STAT_CD='normal'
	    order by Z.REG_DT desc limit #{offset}, #{size}
	 </select>
	 
	<select id="selectInquiryListCnt" resultType="int">
	    select count(*) AS ROW_CNT from (
		    <include refid="sql_bbs_w_list" />
	    	and	BBS_ID='inquiry' and STAT_CD='normal'
		) CNT
	</select>	

	<!-- 문의상세 -->
	<select id="selectInquiryInfo" resultType="CommonMap">
		select
		    A.*,
		    CASE WHEN C.P_CD_NM IS NULL THEN '' ELSE C.CD_NM END AS CATE_NM,
		    CASE WHEN C.P_CD_NM IS NULL THEN C.CD_NM ELSE C.P_CD_NM END AS P_CATE_NM,
			case when B.reply_cnt > 0 then 'Y' else 'N' end as REPLY_YN,
			B.LAST_REPLY_DT, 
			D.EMP_NAME
		from BBS_WRITE A
		left outer join (
			select bbs_id, write_no, count(*) REPLY_CNT, max(reg_dt) LAST_REPLY_DT from BBS_REPLY group by bbs_id, write_no
		) B ON A.bbs_id = B.bbs_id and A.write_no = B.write_no
		left outer join (
			select distinct CA.CD_ID, CA.CD_NM, CC.CD_ID P_CD_ID, CC.CD_NM P_CD_NM from CODE CA 
			join CODE_GRP CB on CA.grp_id = CB.grp_id
			left outer join CODE CC on CA.P_cd_id = CC.cd_id
			where CA.grp_id = 'bbs_inquiry_category'
			and CA.use_yn = 'Y'
		) C on A.cate_cd = C.cd_id
		left outer join EMP D on A.EMP_NO = D.EMP_NO
		where A.BBS_ID= 'inquiry' and A.STAT_CD='normal' and A.WRITE_NO = #{write_no}
	</select>
	
	<!-- 문의 답변 -->
	<select id="selectInquiryReply" resultType="CommonMap">
		select A.*, B.EMP_NAME from BBS_REPLY A
		join EMP B on A.REG_EMP_NO = B.EMP_NO
		where A.WRITE_NO = #{write_no} 
		and A.REPLY_NO = (select X.REPLY_NO from BBS_REPLY X where ifnull(X.DEL_YN, 'N') = 'N' and X.BBS_ID = A.BBS_ID and X.WRITE_NO = A.WRITE_NO order by X.REG_DT desc limit 1)
	</select>
	
	<!-- 문의상세 파일 리스트-->
	<select id="selectFileList" resultType="CommonMap">
		select * from BBS_FILE where WRITE_NO = #{write_no}
	</select>

		<!-- 카테고리 리스트 -->
	<select id="selectInquiryCategory" resultType="Map">
		select 		GRP_ID
				  , CD_ID, CD_NM, CD_NM_EN, CD_NM_CN
				  , CD_VAL, CD_VAL2, CD_VAL3
				  , P_GRP_ID, P_CD_ID, LEVEL
				  , CMMT, DISP_ORD
		from 		CODE
		where		USE_YN = 'Y'
				<foreach collection="grp_ids" item="item" index="index" open="and GRP_ID in (" close=")" separator=",">
					'${item}'
				</foreach>
		order by GRP_ID, DISP_ORD, CD_NM_EN
	</select>
	
	<!-- (로그인)회원정보 -->
	<select id="selectInquiryCustomerInfo" resultType="CommonMap">
		select CU.*
			, (select CASE WHEN max(CP.VALID_TO_DT) >= NOW() THEN "정회원" ELSE "준회원" END 
			   from CUST_PAY CP where CU.cust_no = CP.cust_no) MEMBERSHIP_NM
			, (select CASE WHEN max(CP.VALID_TO_DT) >= NOW() THEN "Y" ELSE "N" END 
			    from CUST_PAY CP where CU.cust_no = CP.cust_no) MEMBERSHIP_YN
			, (select CONCAT('[', GROUP_CONCAT('"', PW.PUSH_WAY_CD, '"'), ']')  
				from CUST_PUSH_WAY PW where PW.CUST_NO = CU.CUST_NO) PUSH_WAY_JSON
			, (select CONCAT('[', GROUP_CONCAT('"', IA.INTE_AREA_CD, '"'), ']') 
				from CUST_INTE_AREA IA where IA.CUST_NO = CU.CUST_NO) INTE_AREA_JSON
		   from CUST CU
		   where JOIN_KIND_CD = 'online'
		   and CU.STAT_CD = 'normal' 
		   and CU.CUST_NO = #{action_user_no}
	</select>
	
	<!-- 첨부파일 -->
	<insert id="insertInquiryWriteFile" parameterType="Map">
	    INSERT INTO BBS_FILE ( 
	    	BBS_ID, 
	    	DOWN_CNT,
	    	FILE_NAME,
			FILE_NAME_ORG,
			FILE_PATH,
			REG_DT,
			SIZE,
			WRITE_NO
		) 
		VALUES (
			'inquiry',
		 	0,
			#{file_name},
			#{file_name_org},
			'${@com.seoulauction.renewal.component.FileManager@moveTempFile(file_path, file_name, 'inquiry')}',
<!-- 			#{file_path}, -->
			now(),
			#{size},
			#{write_no}
		);
	</insert>
	
	<!-- 문의하기 -->
	<insert id="insertInquiryWrite" parameterType="Map" useGeneratedKeys="true" keyProperty="write_no">
	    INSERT INTO BBS_WRITE ( 
	    	BBS_ID,
			CATE_CD,
			CONTENT,
			EMAIL,
			EMP_NO,
			IP,
			NOTICE_YN,
			REG_DT,
			STAT_CD,
			TITLE,
			VIEW_CNT,
			WRITER,
			WRITER_KIND_CD,
			WRITER_NO
		) 
		VALUES (
			'inquiry',
			#{cate_cd},
			#{contents},
			#{email},
			#{emp_no},
			#{action_user_ip},
			'N',
			now(),
			'normal',
			#{inquiry_subject},
			0,
			(SELECT CUST_NAME FROM CUST WHERE CUST_NO = #{action_user_no} LIMIT 1),
			'customer',
			#{action_user_no}
		)
	</insert>

</mapper>