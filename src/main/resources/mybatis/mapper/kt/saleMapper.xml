<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seoulauction.renewal.mapper.kt.SaleMapper">
    <select id="selectSale" resultType="commonMap" parameterType="commonMap">
        SELECT COUNT(*) ROW_CNT
        FROM CUST A,
             ACADEMY_REQ B,
             ACADEMY C
        WHERE A.CUST_NO = B.CUST_NO
          AND B.ACADEMY_NO = C.ACADEMY_NO
          AND A.CUST_NO = #{cust_no}
          AND B.DEL_YN = 'N'
    </select>
    <select id="selectSaleInfo" resultType="CommonMap" parameterType="commonMap">
        select
          S.SALE_NO
        , S.SALE_KIND_CD
        , IF(S.SALE_TH_DSP_YN = 'N', '', S.SALE_TH) SALE_TH
        , IF(S.SALE_TH_DSP_YN = 'N', '', f_ordinal_number(S.SALE_TH)) SALE_TH_DSP
        , COLUMN_JSON(S.TITLE_BLOB) TITLE_JSON
        , COLUMN_GET(S.TITLE_BLOB, 'ko' AS CHAR) SALE_TITLE_KO
        , COLUMN_GET(S.TITLE_BLOB, 'en' AS CHAR) SALE_TITLE_EN
        , S.FROM_DT
        , S.TO_DT
        , S.CURR_CD
        , COLUMN_JSON(S.CMMT_BLOB) CMMT_JSON
        , COLUMN_JSON(S.PLACE_BLOB) PLACE_JSON
        , S.STAT_CD
        , now() as DB_NOW
        , concat('[',
        GROUP_CONCAT('{'
        , '"PLACE_JSON":', ifnull(CAST(COLUMN_JSON(SP.PLACE_BLOB) as char), ''), ', '
        , '"ADDR_JSON":', ifnull(CAST(COLUMN_JSON(SP.ADDR_BLOB) as char), ''), ', '
        , '"FROM_DT":"', SP.FROM_DT, '", '
        , '"TO_DT":"', SP.TO_DT, '", '
        , '"FROM_TIME":"', SP.FROM_TIME, '", '
        , '"TO_TIME":"', SP.TO_TIME, '", '
        , '"MAP_URL":"', ifnull(SP.MAP_URL, ''), '"'
        , '}')
        ,']') as PREVIEW_JSON
        , (select MAX(L.TO_DT) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY L.SALE_NO) END_DT
        , (select MIN(COLUMN_GET(EXPE_PRICE_FROM_BLOB, 'KRW' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP
        BY L.SALE_NO) MIN_KRW_EXPE_PRICE
        , (select MAX(COLUMN_GET(EXPE_PRICE_TO_BLOB, 'KRW' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY
        L.SALE_NO) MAX_KRW_EXPE_PRICE
        , (select MIN(COLUMN_GET(EXPE_PRICE_FROM_BLOB, 'HKD' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP
        BY L.SALE_NO) MIN_HKD_EXPE_PRICE
        , (select MAX(COLUMN_GET(EXPE_PRICE_TO_BLOB, 'HKD' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY
        L.SALE_NO) MAX_HKD_EXPE_PRICE
        , (select MIN(COLUMN_GET(EXPE_PRICE_FROM_BLOB, 'USD' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP
        BY L.SALE_NO) MIN_USD_EXPE_PRICE
        , (select MAX(COLUMN_GET(EXPE_PRICE_TO_BLOB, 'USD' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY
        L.SALE_NO) MAX_USD_EXPE_PRICE
        , (
        <![CDATA[select MAX(SALE_NO) from SALE where STAT_CD = 'open' and FROM_DT <= now() and TO_DT >=now() and SALE_NO < #{sale_no} order by  FROM_DT]]>
        ) AS PREV_SALE_NO
        , (
        <![CDATA[select MIN(SALE_NO) from SALE where STAT_CD = 'open' and FROM_DT <= now() and TO_DT >=now() and SALE_NO > #{sale_no} order by  FROM_DT]]>
        ) AS NEXT_SALE_NO
        , (
        <![CDATA[select LC.CLOSE_YN from LOT LC where LC.SALE_NO = S.SALE_NO AND LC.LOT_NO = (SELECT MAX(LC1.LOT_NO) FROM LOT LC1 WHERE LC1.SALE_NO = S.SALE_NO AND LC1.STAT_CD <> 'reentry')]]>
        ) AS CLOSE_YN
        , SI.FILE_PATH as SALE_IMG_PATH
        , SI.FILE_NAME as SALE_IMG_NAME
        , S.AUTO_BID_REQ_CLOSE_DT
        , COLUMN_JSON(S.NOTICE_BLOB) NOTICE_JSON
        , COLUMN_JSON(S.NOTICE_DTL_BLOB) NOTICE_DTL_JSON
        , DATE_FORMAT(S.TO_DT,'%a') LOT_EXPIRE_DATE_DAY
        , DATE_FORMAT(S.TO_DT,'%m.%d(%a) %H:%i') LOT_EXPIRE_DATE_TIME_T
        , S.SALE_OUTSIDE_YN
        , S.LIVE_BID_YN
        , S.LIVE_BID_DT
        , if(S.SALE_KIND_CD in('plan', 'main', 'hongkong') and S.TO_DT &lt; current_timestamp - interval 5 year, 'Y',
        'N') as IS_OLD_SALE
        , BW.WRITE_NO <!-- 공지사항 불러오기 -->
        from SALE S
        left outer join BBS_WRITE BW on S.SALE_NO = BW.SALE_NO AND BBS_ID = 'notice'
        left outer join SALE_PREV SP on S.SALE_NO = SP.SALE_NO
        left outer join SALE_IMG SI
        on SI.SALE_NO = S.SALE_NO
        and SI.IMG_NO = (select A.IMG_NO from SALE_IMG A where A.SALE_NO = S.SALE_NO order by A.IMG_NO limit 1)
        where S.SALE_NO = #{sale_no} <!-- S.STAT_CD = 'open' and  (YDH수정. 2016.08.25 Upcomming에 세일경매 보여주지 않음. stat_cd = 'open'이면 current에도 경매정보 보여짐.)-->
        group by S.SALE_NO
    </select>
    <select id="selectExchRateList" resultType="CommonMap" parameterType="commonMap">
        select EX.*
        from SALE_EXCH_RATE EX
        where EX.SALE_NO = #{sale_no}
    </select>
    <select id="selectLotInfo" resultType="CommonMap" parameterType="commonMap">
        select
          L.SALE_NO, L.LOT_NO, L.STAT_CD, L.FROM_DT, L.TO_DT
        , L.TO_DT AS SALE_TO_DT
        , L.START_PRICE
        , L.GROW_PRICE
        , COLUMN_JSON(L.TITLE_BLOB) TITLE_JSON
        , COLUMN_JSON(L.STITLE_BLOB) STITLE_JSON
        , COLUMN_GET(L.TITLE_BLOB, 'ko' as CHAR) TITLE_KO_TXT
        , COLUMN_GET(L.TITLE_BLOB, 'en' as CHAR) TITLE_EN_TXT
        , L.EDITION
        , COLUMN_JSON(L.MAKE_YEAR_BLOB) MAKE_YEAR_JSON
        , TRIM(COLUMN_GET(L.MAKE_YEAR_BLOB, 'ko' as char)) as MAKE_YEAR_KO
        , COLUMN_JSON(L.SIGN_INFO_BLOB) SIGN_INFO_JSON
        , COLUMN_JSON(L.COND_RPT_BLOB) COND_RPT_JSON # YDH. 컨디션리포트용 데이터 컬럼 추가.
        , COLUMN_JSON(L.LITE_INFO_BLOB) LITE_INFO_JSON
        , COLUMN_JSON(L.EXHI_INFO_BLOB) EXHI_INFO_JSON # YDH. 전시정보 데이터 컬럼 추가.
        , COLUMN_JSON(L.PROV_INFO_BLOB) PROV_INFO_JSON # YDH. 소장정보 데이터 컬럼 추가.
        , COLUMN_JSON(L.ETC_INFO_BLOB) ETC_INFO_JSON # YDH. 기타정보 데이터 컬럼 추가.
        , COLUMN_JSON(L.CMMT_BLOB) CMMT_JSON
        , COLUMN_JSON(AT.ARTIST_NAME_BLOB) ARTIST_NAME_JSON
        , COLUMN_GET(AT.ARTIST_NAME_BLOB, 'ko' as CHAR) ARTIST_NAME_KO_TXT
        , COLUMN_GET(AT.ARTIST_NAME_BLOB, 'en' as CHAR) ARTIST_NAME_EN_TXT
        , AT.BORN_YEAR
        , AT.DIE_YEAR
        , CD.CD_NM as MATE_NM
        , CD.CD_NM_EN as MATE_NM_EN
        , CD.CD_NM_CN as MATE_NM_CN
        , LI.FILE_PATH as LOT_IMG_PATH
        , LI.FILE_NAME as LOT_IMG_NAME
        , IFNULL(BD.LAST_PRICE, L.DISP_SOLD_PRICE) AS LAST_PRICE
        , CASE WHEN #{cust_no} != '' AND BD.LAST_CUST_NO = #{cust_no} THEN BD.LAST_CUST_ID
        ELSE concat(substr(BD.LAST_CUST_ID, 1, 2), '***') END AS LAST_CUST_ID
        , ifnull(BD.SOLD_YN, 'N') as SOLD_YN
        , if(now() > L.TO_DT, 'Y', 'N') as END_YN
        , ifnull(BD.BID_CNT, 0) as BID_CNT
        , if(L.TO_DT &lt; now(), 'Y', 'N') as END_YN
        , L.CLOSE_YN as CLOSE_YN
        , L.EXPE_PRICE_INQ_YN as EXPE_PRICE_INQ_YN
        , COLUMN_JSON(L.EXPE_PRICE_FROM_BLOB) EXPE_PRICE_FROM_JSON
        , COLUMN_JSON(L.EXPE_PRICE_TO_BLOB) EXPE_PRICE_TO_JSON
        , CONCAT('['
        , GROUP_CONCAT('{',
        '"UNIT_CD":"', ifnull(LS.UNIT_CD, 'cm') ,'",',
        '"SIZE1":', ifnull(LS.SIZE1,0) ,',',
        '"SIZE2":', ifnull(LS.SIZE2,0) ,',',
        '"SIZE3":', ifnull(LS.SIZE3,0) ,',',
        '"CANVAS":', ifnull(LS.CANVAS,0) ,',',
        '"DIAMETER_YN":"', ifnull(LS.DIAMETER_YN,'N') ,'",',
        '"PREFIX":"', ifnull(LS.PREFIX,'') ,'",',
        '"SUFFIX":"', ifnull(LS.SUFFIX,'') ,'",',
        '"MIX_CD":"', ifnull(LS.MIX_CD,'h') ,'",',
        '"CANVAS_EXT_YN":"', ifnull(LS.CANVAS_EXT_YN,'N') , '"',
        '}')
        ,']') AS LOT_SIZE_JSON
        , GROUP_CONCAT(ifnull(LS.PREFIX,''),' ', CASE WHEN LS.DIAMETER_YN = 'Y' THEN 'ø' ELSE '' END,
        ifnull(truncate(LS.SIZE1, 1),''), CASE WHEN LS.SIZE1 IS NULL THEN '' ELSE '×' END,
        ifnull(truncate(LS.SIZE2, 1),''), CASE WHEN LS.SIZE3 IS NULL THEN '' ELSE '×' END,
        ifnull(truncate(LS.SIZE3, 1),''), case when LS.MIX_CD = 'height' then '(h)' else '' end, 'cm', case when
        LS.SUFFIX is null then '' else ' (' end, ifnull(LS.SUFFIX,''), case when LS.SUFFIX is null then '' else ')' end,
        CHAR(10))
        AS LOT_SIZE_STRING
        , COLUMN_JSON(AT.PROFILE_BLOB) PROFILE_JSON
        , LI.FILE_PATH as LOT_IMG_PATH
        , LI.FILE_NAME as LOT_IMG_NAME
        , (SELECT IFNULL(MAX(LOT_NO), 0) FROM LOT WHERE SALE_NO = L.SALE_NO AND LOT_NO &lt; L.LOT_NO AND STAT_CD &lt;&gt;
        'reentry') AS PREV_LOT_NO # YDH. 이전 LOT NO.
        , (SELECT IFNULL(MIN(LOT_NO), 0) FROM LOT WHERE SALE_NO = L.SALE_NO AND LOT_NO &gt; L.LOT_NO AND STAT_CD &lt;&gt;
        'reentry') AS NEXT_LOT_NO # YDH. 다음 LOT NO.
        , SA.ARTWORK_NOS
        , L.IMG_DISP_YN
        , L.EXPE_PRICE_INQ_YN
        , now() as DB_NOW
        , IFNULL(CR.CONFIRM_YN, 'N') AS CR_INTE_LOT
        , IFNULL(IL.DEL_YN, 'Y') AS INTE_LOT_DEL
        , (select count(*) from BID B where B.SALE_NO = L.SALE_NO and B.LOT_NO = L.LOT_NO and B.CUST_NO = #{cust_no})
        MY_BID_CNT
        , (select count(*) from BID B where B.SALE_NO = L.SALE_NO and B.CUST_NO = #{cust_no}) MY_BID_SALE_CNT
        , (select count(*) from AUTO_BID_REQ B where B.SALE_NO = L.SALE_NO and B.CUST_NO = #{cust_no}) MY_BID_AUTO_CNT
        , L.WINE_YN
        , IFNULL(L.FRAME_CD, 'none') AS FRAME_CD
        , IFNULL(L.GUARANTEE_YN, 'Y') GUARANTEE_YN
        , L.ZEROBASE_PRICE_YN
        , COLUMN_JSON(L.EXHIBITION_PRICE_BLOB) EXHIBITION_PRICE_JSON
        , ifnull(LS.UNIT_CD, 'cm')             UNIT_CD
        , ifnull(LS.SIZE1, '0')                SIZE1
        , ifnull(LS.SIZE2, '0')                SIZE2
        , L.ARTIST_NO ARTIST_NO
        , if(CD_ART.CD_ID in('traditional_painting', 'local_painting', 'foreign_painting'), 'Y', 'N') AS VIEW_SCALE_YN
        , DATE_FORMAT(L.TO_DT,'%Y-%m-%d') LOT_EXPIRE_DATE
        , DATE_SUB( date_format( L.TO_DT ,'%Y-%m-%d') , interval 1 second) LOT_EXPIRE_DATE_SUB
        , (SELECT MAX(BID_PRICE) FROM BID WHERE SALE_NO = L.SALE_NO AND LOT_NO = L.LOT_NO AND BID_KIND_CD ='place') OFFLINE_MAX_BID_PRICE
        from LOT L
        left outer join (<include refid="com.seoulauction.renewal.mapper.kt.CommonMapper.saleLastBidInfos"/>) BD on
        BD.SALE_NO = L.SALE_NO and BD.LOT_NO	 = L.LOT_NO
        left outer join ARTIST AT
        on AT.ARTIST_NO = L.ARTIST_NO
        left outer join CODE CD
        on CD.GRP_ID = 'material' and CD.CD_ID = L.MATE_CD
        left outer join (SELECT * FROM CODE WHERE GRP_ID = 'artwork_category') CD_ART on CD_ART.CD_ID = L.CATE_CD
        left outer join LOT_IMG LI
        on LI.SALE_NO = L.SALE_NO and LI.LOT_NO = L.LOT_NO
        and LI.IMG_NO = (select A.IMG_NO from LOT_IMG A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO order by
        A.DISP_ORD limit 1)
        left outer join LOT_SIZE LS ON LS.SALE_NO = L.SALE_NO AND LS.LOT_NO = L.LOT_NO
        LEFT OUTER JOIN (SELECT SALE_NO, LOT_NO, GROUP_CONCAT(ARTWORK_NO) ARTWORK_NOS FROM SALE_ARTWORK WHERE SALE_NO =
        #{sale_no} AND LOT_NO = #{lot_no}) SA
        ON L.SALE_NO = SA.SALE_NO AND L.LOT_NO = SA.LOT_NO
        left outer join CUST_CR_LOT CR ON L.SALE_NO = CR.SALE_NO AND L.LOT_NO = CR.LOT_NO AND CR.DEL_YN = 'N' AND
        CR.CUST_NO = #{cust_no}
        left outer join CUST_INTE_LOT IL ON L.SALE_NO = IL.SALE_NO AND L.LOT_NO = IL.LOT_NO AND IL.DEL_YN = 'N' AND
        IL.CUST_NO = #{cust_no}
        where L.SALE_NO = #{sale_no}
        and L.LOT_NO = #{lot_no}
        group by L.SALE_NO, L.LOT_NO
    </select>
    <select id="selectLotImages" resultType="CommonMap" parameterType="commonMap">
        select * from LOT_IMG LI
        where LI.SALE_NO = #{sale_no}
        <if test="lot_no != null">
            and LI.LOT_NO = #{lot_no}
        </if>
        order by LI.LOT_NO, LI.DISP_ORD
    </select>
    <select id="selectSaleLotImages" resultType="CommonMap" parameterType="commonMap">
        SELECT B.SALE_NO     SALE_NO,
               B.LOT_NO      LOT_NO,
               B.IMG_DISP_YN,
               C.FILE_PATH   FILE_PATH,
               C.FILE_NAME   FILE_NAME,
               ifnull(D.UNIT_CD, 'cm')             UNIT_CD,
               ifnull(D.SIZE1, '0')                SIZE1,
               ifnull(D.SIZE2, '0')                SIZE2,
               CONCAT('['
                   , GROUP_CONCAT('{',
                                  '"UNIT_CD":"', ifnull(D.UNIT_CD, 'cm'), '",',
                                  '"SIZE1":', ifnull(D.SIZE1, 0), ',',
                                  '"SIZE2":', ifnull(D.SIZE2, 0), ',',
                                  '"SIZE3":', ifnull(D.SIZE3, 0), ',',
                                  '"CANVAS":', ifnull(D.CANVAS, 0), ',',
                                  '"DIAMETER_YN":"', ifnull(D.DIAMETER_YN, 'N'), '",',
                                  '"PREFIX":"', ifnull(D.PREFIX, ''), '",',
                                  '"SUFFIX":"', ifnull(D.SUFFIX, ''), '",',
                                  '"MIX_CD":"', ifnull(D.MIX_CD, 'h'), '",',
                                  '"CANVAS_EXT_YN":"', ifnull(D.CANVAS_EXT_YN, 'N'), '"',
                                  '}')
                   , ']') AS LOT_SIZE_JSON
            , B.IMG_DISP_YN
        FROM SALE A
                 INNER JOIN LOT B ON A.SALE_NO = B.SALE_NO
                 INNER JOIN LOT_IMG C ON B.SALE_NO = C.SALE_NO AND B.LOT_NO = C.LOT_NO AND C.DISP_ORD = 1
                 LEFT OUTER JOIN LOT_SIZE D ON D.SALE_NO = B.SALE_NO AND D.LOT_NO = B.LOT_NO
        WHERE B.SALE_NO =  #{sale_no}
          AND B.CLOSE_YN = 'N'
          AND B.STAT_CD = 'entry'
          AND B.WWW_DISP_YN = 'Y'
        GROUP BY B.SALE_NO, B.LOT_NO, C.FILE_PATH, C.FILE_NAME
        ORDER BY B.LOT_NO ASC;
    </select>

    <select id="searchListCount" parameterType="CommonMap" resultType="CommonMap">
        SELECT COUNT(B.LOT_NO) AS CNT, COUNT(B.ALL_SALE_KIND) AS ALL_CNT, COUNT(B.LIVE_SALE_KIND) AS LIVE_CNT,
        COUNT(B.ONLINE_SALE_KIND) AS ONLINE_CNT
        FROM(
        select A.LOT_NO as LOT_NO,
        (select S.SALE_KIND_CD FROM SALE S WHERE S.SALE_NO = A.SALE_NO AND A.SALE_KIND_CD IN('online', 'online_zb',
        'main', 'hongkong', 'plan')) AS ALL_SALE_KIND,
        (select S.SALE_KIND_CD FROM SALE S WHERE S.SALE_NO = A.SALE_NO AND A.SALE_KIND_CD IN('main', 'hongkong',
        'plan')) AS LIVE_SALE_KIND,
        (select S.SALE_KIND_CD FROM SALE S WHERE S.SALE_NO = A.SALE_NO AND A.SALE_KIND_CD IN('online', 'online_zb')) AS
        ONLINE_SALE_KIND
        from (
        <include refid="searchList"/>
        ) A
        ) B
    </select>


    <select id="searchListPaging" parameterType="CommonMap" resultType="CommonMap">
        <include refid="searchList"/>
        limit #{from}, #{rows}
    </select>

    <select id="getCustomerByCustNo" parameterType="CommonMap" resultType="CommonMap">
        select CU.*
             , (select CASE WHEN max(CP.VALID_TO_DT) >= NOW() THEN "정회원" ELSE "준회원" END
                from CUST_PAY CP
                where CU.cust_no = CP.cust_no) MEMBERSHIP_NM
             , (select CASE WHEN max(CP.VALID_TO_DT) >= NOW() THEN "Y" ELSE "N" END
                from CUST_PAY CP
                where CU.cust_no = CP.cust_no) MEMBERSHIP_YN
             , (select CONCAT('[', GROUP_CONCAT('"', PW.PUSH_WAY_CD, '"'), ']')
                from CUST_PUSH_WAY PW
                where PW.CUST_NO = CU.CUST_NO) PUSH_WAY_JSON
             , (select CONCAT('[', GROUP_CONCAT('"', IA.INTE_AREA_CD, '"'), ']')
                from CUST_INTE_AREA IA
                where IA.CUST_NO = CU.CUST_NO) INTE_AREA_JSON
        from CUST CU
        where JOIN_KIND_CD = 'online'
          and CU.STAT_CD = 'normal'
          and CU.CUST_NO = #{cust_no}
    </select>

    <insert id="searchLog" parameterType="CommonMap">
        <if test="keyword != null and keyword != ''">
            insert into SEARCH_LOG(CUST_NO, SEARCH_DATE, SEARCH_ARTIST, SEARCH_TITLE, SEARCH_ALL, SEARCH_MATERIAL,
            SEARCH_FROM_DT, SEARCH_TO_DT)
            values(#{action_user_no}, now(),
            <choose>
                <when test="chk=='art'">#{keyword}</when>
                <when test="chk!='art'">null</when>
            </choose>
            ,
            <choose>
                <when test="chk=='title'">#{keyword}</when>
                <when test="chk!='title'">null</when>
            </choose>
            ,
            <choose>
                <when test="chk=='all'">#{keyword}</when>
                <when test="chk!='all'">null</when>
            </choose>
            ,
            #{mate_nm}, #{from_dt}, #{to_dt}
            )
        </if>
    </insert>
    <insert id="addCustInteLot" parameterType="CommonMap"> <!-- LOT 관심체크. 2017.04.10 YDH -->
        INSERT INTO CUST_INTE_LOT(
        CUST_NO,
        SALE_NO,
        LOT_NO,
        REG_DT
        )
        VALUES(
        #{action_user_no},
        #{sale_no},
        #{lot_no},
        now()
        )
    </insert>
    <update id="delCustInteLot" parameterType="CommonMap">
        DELETE
        FROM CUST_INTE_LOT
        WHERE CUST_NO = #{action_user_no}
          AND SALE_NO = #{sale_no}
          AND LOT_NO = #{lot_no}
    </update>
    <sql id="searchList">
        select L.SALE_NO, L.LOT_NO
        , S.SALE_KIND_CD
        , IF(S.SALE_TH_DSP_YN = 'N', '', CONCAT(S.SALE_TH, f_ordinal_number(S.SALE_TH))) SALE_TH
        , COLUMN_JSON(S.TITLE_BLOB) SALE_TITLE_JSON
        , S.FROM_DT SALE_FROM_DT
        , S.TO_DT SALE_TO_DT
        , S.CURR_CD
        , S.STAT_CD SALE_STAT_CD
        , COLUMN_JSON(L.TITLE_BLOB) TITLE_JSON
        , COLUMN_JSON(L.STITLE_BLOB) STITLE_JSON
        , L.EDITION
        , COLUMN_JSON(L.MAKE_YEAR_BLOB) MAKE_YEAR_JSON
        , COLUMN_JSON(L.SIGN_INFO_BLOB) SIGN_INFO_JSON
        , COLUMN_JSON(AT.ARTIST_NAME_BLOB) ARTIST_NAME_JSON
        , AT.BORN_YEAR
        , AT.DIE_YEAR
        , CD.CD_NM as MATE_NM
        , CD.CD_NM_EN as MATE_NM_EN
        , CD.CD_NM_CN as MATE_NM_CN
        , LI.FILE_PATH as LOT_IMG_PATH
        , LI.FILE_NAME as LOT_IMG_NAME
        , if(L.TO_DT &lt; now(), 'Y', 'N') as END_YN
        , if(L.TO_DT &lt; now(), 'Y', 'N') as DISPLAY_YN
        , L.CLOSE_YN as CLOSE_YN
        , L.EXPE_PRICE_INQ_YN as EXPE_PRICE_INQ_YN
        , COLUMN_JSON(L.EXPE_PRICE_FROM_BLOB) EXPE_PRICE_FROM_JSON
        , COLUMN_JSON(L.EXPE_PRICE_TO_BLOB) EXPE_PRICE_TO_JSON
        , CONCAT('['
        , GROUP_CONCAT('{',
        '"UNIT_CD":"', ifnull(LS.UNIT_CD, 'cm') ,'",',
        '"SIZE1":', ifnull(LS.SIZE1,0) ,',',
        '"SIZE2":', ifnull(LS.SIZE2,0) ,',',
        '"SIZE3":', ifnull(LS.SIZE3,0) ,',',
        '"CANVAS":', ifnull(LS.CANVAS,0) ,',',
        '"DIAMETER_YN":"', ifnull(LS.DIAMETER_YN,'N') ,'",',
        '"PREFIX":"', ifnull(LS.PREFIX,'') ,'",',
        '"SUFFIX":"', ifnull(LS.SUFFIX,'') ,'",',
        '"MIX_CD":"', ifnull(LS.MIX_CD,'h') ,'",',
        '"CANVAS_EXT_YN":"', ifnull(LS.CANVAS_EXT_YN,'N'), '"',
        '}')
        ,']') AS LOT_SIZE_JSON
        , L.IMG_DISP_YN
        , NOW() AS DB_NOW
        , IFNULL((SELECT MAX(BID_PRICE) FROM BID WHERE SALE_NO = L.SALE_NO AND LOT_NO = L.LOT_NO), L.DISP_SOLD_PRICE) AS
        LAST_PRICE
        , CASE WHEN IFNULL(IL.LOT_NO, 0) = 0 THEN 'N'
            ELSE 'Y' END  FAVORITE_YN
        , IFNULL(L.START_PRICE, 0) AS START_PRICE
        ,(SELECT COUNT(B.BID_NO) FROM BID B WHERE B.SALE_NO = L.SALE_NO AND B.LOT_NO = L.LOT_NO) AS BID_CNT
        from LOT L join SALE S ON S.SALE_NO = L.SALE_NO AND S.SALE_KIND_CD not in ('exhibit', 'exhibit_sa')
        LEFT OUTER JOIN ARTIST AT ON AT.ARTIST_NO = L.ARTIST_NO
        left outer join CODE CD on CD.GRP_ID = 'material' and CD.CD_ID = L.MATE_CD
        LEFT OUTER JOIN LOT_IMG LI ON LI.SALE_NO = L.SALE_NO AND LI.LOT_NO = L.LOT_NO
        AND LI.IMG_NO = (SELECT A.IMG_NO FROM LOT_IMG A WHERE A.SALE_NO = L.SALE_NO AND A.LOT_NO = L.LOT_NO ORDER BY
        A.DISP_ORD LIMIT 1)
        LEFT OUTER JOIN LOT_SIZE LS ON LS.SALE_NO = L.SALE_NO AND LS.LOT_NO = L.LOT_NO
        LEFT OUTER JOIN CUST_INTE_LOT IL
        ON L.SALE_NO = IL.SALE_NO AND L.LOT_NO = IL.LOT_NO AND IL.CUST_NO = #{cust_no} AND
        IL.DEL_YN = 'N'
        <if test="list_type == 'SEARCH' and cust_no != null">
            , (select CUST_NO, EMP_GB from CUST where CUST_NO = #{cust_no}) CU
        </if>
        <if test="list_type == 'SEARCH' and cust_no == null">
            , (select NULL AS CUST_NO, 'N' AS EMP_GB from dual) CU
        </if>
        where 1=1
        and L.WWW_DISP_YN = 'Y'
        and L.STAT_CD != 'reentry'
        and S.STAT_CD = 'open'
        and S.SALE_OUTSIDE_YN = 'N'
        and now() &lt;= case when S.SALE_KIND_CD IN ('online', 'online_zb') then (
        case when (CU.EMP_GB = 'Y' || date_format(S.TO_DT, '%Y-%m-%d') >= date_format(now(), '%Y-%m-%d') )
        then now()
        else (select MAX(L.TO_DT) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY L.SALE_NO) end
        )else now()
        end ## 온라인 경매는 진행중인것만 표시. 오프라인은 모두 표시
        and IF(CU.EMP_GB = 'N' and S.SALE_KIND_CD in ('plan', 'main', 'hongkong'), S.TO_DT &gt; current_timestamp -
        interval 5 year, true)
        <if test="sub_page != null">
            <choose>
                <when test="sub_page  == 'all'">
                    and S.SALE_KIND_CD in (
                    'online', 'online_zb', 'main', 'hongkong', 'plan'
                    )
                </when>
                <when test="sub_page  == 'live'">
                    and S.SALE_KIND_CD in (
                    'main', 'hongkong', 'plan'
                    )
                </when>
                <when test="sub_page  == 'online'">
                    and S.SALE_KIND_CD in (
                    'online', 'online_zb'
                    )
                </when>
            </choose>
        </if>
        <if test="sale_status_end_yn != null or sale_status_ing_yn != null or sale_status_ready_yn != null">
            <trim prefix= "AND (" prefixOverrides="or" suffix=")">
                <if test='sale_status_end_yn == "Y"'>
                    or (DATE_FORMAT(S.TO_DT, '%Y-%m-%d') <![CDATA[<]]> DATE_FORMAT(now(), '%Y-%m-%d'))
                </if>
                <if test='sale_status_ing_yn == "Y"'>
                    or ((DATE_FORMAT(S.FROM_DT, '%Y-%m-%d') <![CDATA[<=]]> DATE_FORMAT(now(), '%Y-%m-%d')
                    and DATE_FORMAT(S.TO_DT, '%Y-%m-%d') <![CDATA[>=]]> DATE_FORMAT(now(), '%Y-%m-%d')))
                </if>
                <if test='sale_status_ready_yn == "Y"'>
                    or (DATE_FORMAT(S.FROM_DT, '%Y-%m-%d') <![CDATA[>]]> DATE_FORMAT(now(), '%Y-%m-%d'))
                </if>
            </trim>
        </if>
        <if test="mate_nm != null">
            and L.MATE_CD in (
                select CD_ID from CODE CD
                where CD.GRP_ID = 'material'
                and (
                CD.CD_NM like concat('%', #{mate_nm}, '%')
                or CD.CD_NM_EN like concat('%', #{mate_nm}, '%')
                or CD.CD_NM_CN like concat('%', #{mate_nm}, '%')
                )
            )
        </if>
        <if test="keyword != null and keyword != ''">
            <choose>
                <when test="chk == 'all'">
                    and ( COLUMN_GET(AT.ARTIST_NAME_BLOB, 'ko' AS CHAR) like concat('%', #{keyword}, '%')
                    or COLUMN_GET(AT.ARTIST_NAME_BLOB, 'en' AS CHAR) like concat('%', #{keyword}, '%')
                    or COLUMN_GET(AT.ARTIST_NAME_BLOB, 'zh' AS CHAR) like concat('%', #{keyword}, '%')
                    or COLUMN_GET(L.TITLE_BLOB, 'ko' AS CHAR) like concat('%', #{keyword}, '%')
                    or COLUMN_GET(L.TITLE_BLOB, 'en' AS CHAR) like concat('%', #{keyword}, '%')
                    or COLUMN_GET(L.TITLE_BLOB, 'zh' AS CHAR) like concat('%', #{keyword}, '%'))
                </when>
                <when test="chk == 'art'">
                    and ( COLUMN_GET(AT.ARTIST_NAME_BLOB, 'ko' AS CHAR) like concat('%', #{keyword}, '%')
                    or COLUMN_GET(AT.ARTIST_NAME_BLOB, 'en' AS CHAR) like concat('%', #{keyword}, '%')
                    or COLUMN_GET(AT.ARTIST_NAME_BLOB, 'zh' AS CHAR) like concat('%', #{keyword}, '%'))
                </when>
                <when test="chk == 'title'">
                    and (COLUMN_GET(L.TITLE_BLOB, 'ko' AS CHAR) like concat('%', #{keyword}, '%')
                    or COLUMN_GET(L.TITLE_BLOB, 'en' AS CHAR) like concat('%', #{keyword}, '%')
                    or COLUMN_GET(L.TITLE_BLOB, 'zh' AS CHAR) like concat('%', #{keyword}, '%'))
                </when>
            </choose>
        </if>
        group by L.SALE_NO, L.LOT_NO
        order by
        <choose>
            <when test="sort_by == 'LOTAS'">L.LOT_NO</when>
            <when test="sort_by == 'LOTDE'">L.LOT_NO desc</when>
            <when test="sort_by == 'ESTAS'">COLUMN_GET(L.EXPE_PRICE_FROM_BLOB, 'KRW' as double), L.LOT_NO</when>
            <when test="sort_by == 'ESTDE'">COLUMN_GET(L.EXPE_PRICE_FROM_BLOB, 'KRW' as double) desc, L.LOT_NO</when>
            <when test="sort_by == 'ENDAS'">S.TO_DT, L.LOT_NO</when>
            <when test="sort_by == 'ENDDE'">S.TO_DT DESC, L.LOT_NO</when>
            <when test="sort_by == 'BIPAS'">BD.LAST_PRICE, L.LOT_NO</when>
            <when test="sort_by == 'BIPDE'">BD.LAST_PRICE desc, L.LOT_NO</when>
            <when test="sort_by == 'BICAS'">BD.BID_CNT, L.LOT_NO</when>
            <when test="sort_by == 'BICDE'">BD.BID_CNT desc, L.LOT_NO</when>
            <otherwise>L.LOT_NO</otherwise>
        </choose>
    </sql>

    <insert id="upsertRecentlyView" parameterType="CommonMap">
        insert into CUST_RECENTLY_VIEWED (SALE_NO, LOT_NO, CUST_NO, VIEW_DT)
        values (#{sale_no}, #{lot_no}, #{cust_no}, sysdate()) on duplicate key
        update VIEW_DT = sysdate()
    </insert>
    <select id="selectRecentlyView" parameterType="CommonMap" resultType="CommonMap">
        select A.SALE_NO,
               A.LOT_NO,
               B.FILE_PATH,
               B.FILE_NAME,
               COLUMN_JSON(C.TITLE_BLOB)       TITLE_BLOB_JSON,
               COLUMN_JSON(D.ARTIST_NAME_BLOB) ARTIST_NAME_BLOB_JSON,
               CASE
                   WHEN IFNULL(E.LOT_NO, 0) = 0 THEN 'N'
                   ELSE 'Y' END                FAVORITE_YN
        from CUST_RECENTLY_VIEWED A
                 INNER JOIN LOT_IMG B ON A.SALE_NO = B.SALE_NO AND A.LOT_NO = B.LOT_NO
                 INNER JOIN LOT C ON A.SALE_NO = C.SALE_NO AND A.LOT_NO = C.LOT_NO
                 INNER JOIN ARTIST D ON C.ARTIST_NO = D.ARTIST_NO
                 LEFT OUTER JOIN CUST_INTE_LOT E
                                 ON A.SALE_NO = E.SALE_NO AND A.LOT_NO = E.LOT_NO AND A.CUST_NO = E.CUST_NO AND
                                    E.DEL_YN = 'N'
        where A.CUST_NO = #{cust_no}
          and A.SALE_NO = #{sale_no}
          and B.DISP_ORD = 1
        ORDER BY VIEW_DT DESC limit 5;
    </select>

    <select id="selectBidForSuccessBid" parameterType="CommonMap" resultType="CommonMap">
        SELECT *
        FROM BID
        WHERE SALE_NO = #{sale_no}
          and LOT_NO = #{lot_no}
          and BID_NO = #{bid_no} LIMIT
			1
    </select>

    <select id="selectSuccessBidForOverlab" parameterType="CommonMap" resultType="CommonMap">
        SELECT *
        FROM SUCCESS_BID
        WHERE SALE_NO = #{sale_no}
          and LOT_NO = #{lot_no}
          and BID_NO = #{bid_no} LIMIT
			1
    </select>
    <insert id="insertSuccessBid" parameterType="CommonMap">
        INSERT INTO SUCCESS_BID(SALE_NO,
                                LOT_NO,
                                BID_NO)
        VALUES (#{sale_no},
                #{lot_no},
                #{bid_no})
    </insert>

    <!-- 오프라인/온라인 각 상황에 맞게 insert -->
    <insert id="insertBid" parameterType="CommonMap">
        INSERT INTO BID(
             SALE_NO
            ,LOT_NO
            ,CUST_NO
            ,BID_KIND_CD
            ,BID_DT
            ,BID_PRICE
            <if test="emp_no != null">
            ,EMP_NO
            </if>
            <if test="padd_no != null">
            ,PADD_NO
            </if>
            <if test="auto_bid_req_no != null">
            ,AUTO_BID_REQ_NO
            </if>
            <if test="req_emp_no != null">
            ,REG_EMP_NO
            </if>
            <if test="bid_grow_price != null">
            ,BID_GROW_PRICE
            </if>
            <if test="bid_dt != null">
            ,REG_DT
            </if>
            <if test="reg_emp_no != null">
            ,REG_EMP_NO
            </if>
            <if test="mod_emp_no != null">
            ,MOD_EMP_NO
            </if>
            <if test="etc != null">
            ,ETC
            </if>
        )
        VALUES(
             #{sale_no}
            ,#{lot_no}
            ,#{cust_no}
            ,#{bid_kind_cd}
            ,#{bid_dt}
            ,#{bid_price}
            <if test="emp_no != null">
            ,#{emp_no}
            </if>
            <if test="padd_no != null">
            ,#{padd_no}
            </if>
            <if test="auto_bid_req_no != null">
            ,#{auto_bid_req_no}
            </if>
            <if test="req_emp_no != null">
            ,#{req_emp_no}
            </if>
            <if test="bid_grow_price != null">
            ,#{bid_grow_price}
            </if>
            <if test="bid_dt != null">
             ,#{bid_dt}
            </if>
            <if test="reg_emp_no != null">
            ,#{reg_emp_no}
            </if>
            <if test="mod_emp_no != null">
            ,#{mod_emp_no}
            </if>
            <if test="etc != null">
            ,#{etc}
            </if>
        )
    </insert>

    <select id="selectTopBid" parameterType="CommonMap"  resultType="CommonMap">
        select *
        from BID
        where SALE_NO = #{sale_no}
          and LOT_NO = #{bid_no}
        order by BID_NO desc limit 1;
    </select>

    <select id="selectCustInteLot" parameterType="CommonMap" resultType="CommonMap"> <!-- LOT 관심체크. 2017.04.10 YDH -->
        select * from CUST_INTE_LOT
        where sale_no = #{sale_no} and lot_no = #{lot_no} and cust_no = #{cust_no} and del_yn = 'N';
    </select>

    <select id="selectSaleList" parameterType="CommonMap" resultType="CommonMap">
        SELECT A.SALE_NO,
               A.SALE_TH,
               COLUMN_JSON(A.TITLE_BLOB)           SALE_TITLE_JSON,
               B.LOT_NO,
               COLUMN_JSON(B.TITLE_BLOB)           LOT_TITLE_JSON,
               COLUMN_JSON(B.MAKE_YEAR_BLOB)       MAKE_YEAR_JSON,
               D.ARTIST_NO,
               D.BORN_YEAR,
               COLUMN_JSON(D.ARTIST_NAME_BLOB)     ARTIST_NAME_JSON,
               C.FILE_PATH,
               C.FILE_NAME,
               concat('[',
               GROUP_CONCAT('{',
                '"UNIT_CD":"', ifnull(E.UNIT_CD, 'cm') ,'",',
                '"SIZE1":', ifnull(E.SIZE1,0) ,',',
                '"SIZE2":', ifnull(E.SIZE2,0) ,',',
                '"SIZE3":', ifnull(E.SIZE3,0) ,',',
                '"CANVAS":', ifnull(E.CANVAS,0) ,',',
                '"DIAMETER_YN":"', ifnull(E.DIAMETER_YN,'N') ,'",',
                '"PREFIX":"', ifnull(E.PREFIX,'') ,'",',
                '"SUFFIX":"', ifnull(E.SUFFIX,'') ,'",',
                '"MIX_CD":"', ifnull(E.MIX_CD,'h') ,'",',
                '"CANVAS_EXT_YN":"', ifnull(E.CANVAS_EXT_YN,'N'), '"',
                '}')
                ,']') AS LOT_SIZE_JSON,
               ifnull(E.UNIT_CD, 'cm')             UNIT_CD,
               ifnull(E.SIZE1, '0')                SIZE1,
               ifnull(E.SIZE2, '0')                SIZE2,
               ifnull(E.SIZE3, '0')                SIZE3,
               ifnull(E.CANVAS, '0')               CANVAS,
               ifnull(E.DIAMETER_YN, 'N')          DIAMETER_YN,
               ifnull(E.PREFIX, '')                PREFIX,
               ifnull(E.SUFFIX, '')                SUFFIX,
               ifnull(E.MIX_CD, 'h')               MIX_CD,
               ifnull(E.CANVAS_EXT_YN, 'N')        CANVAS_EXT_YN,
               F.CD_NM CD_NM,
               COLUMN_JSON(B.EXPE_PRICE_FROM_BLOB) EXPE_PRICE_FROM_JSON,
               COLUMN_JSON(B.EXPE_PRICE_TO_BLOB)   EXPE_PRICE_TO_JSON,
               IFNULL(G.DEL_YN,'Y') FAVORITE_YN, /*N 이면 좋아요가 있음. Y면 좋아요가 아님.*/
               B.LOT_TAG,
               B.IMG_DISP_YN,
               B.STAT_CD,
               B.EXPE_PRICE_INQ_YN,
               DATE_FORMAT(B.TO_DT,'%Y-%m-%d') LOT_EXPIRE_DATE,
               DATE_FORMAT(B.TO_DT,'%a') LOT_EXPIRE_DATE_DAY,
               DATE_FORMAT(A.TO_DT,'%Y-%m-%d %T') LOT_EXPIRE_DATE_ALL,
               DATE_SUB( date_format(B.TO_DT ,'%Y-%m-%d') , interval 1 second) LOT_EXPIRE_DATE_SUB,
               date_format(A.FROM_DT,'%m.%d(%a)') FROM_DT,
               date_format(A.TO_DT, '%m.%d(%a)') TO_DT,
               A.FROM_DT FROM_DT_ORG,
               A.TO_DT TO_DT_ORG,
               A.WWW_DISP_YN DISP_YN,
               B.START_PRICE,
               A.SALE_KIND_CD,
               H.CD_ID CATE_CD_ID,
               H.CD_NM CATE_CD_NM,
               H.CD_NM_EN CATE_CD_NM_EN,
               (SELECT MAX(BID_PRICE) FROM BID WHERE SALE_NO = B.SALE_NO AND LOT_NO = B.LOT_NO) MAX_BID_PRICE,
               (SELECT MAX(BID_PRICE) FROM BID WHERE SALE_NO = B.SALE_NO AND LOT_NO = B.LOT_NO AND BID_KIND_CD ='place') OFFLINE_MAX_BID_PRICE
                , B.IMG_DISP_YN
        from SALE A
                 INNER JOIN LOT B ON A.SALE_NO = B.SALE_NO
                 LEFT OUTER JOIN LOT_IMG C ON B.SALE_NO = C.SALE_NO AND B.LOT_NO = C.LOT_NO
                    AND C.IMG_NO = (select LI.IMG_NO from LOT_IMG LI where LI.SALE_NO = A.SALE_NO and LI.LOT_NO = B.LOT_NO order by LI.DISP_ORD limit 1)
                 LEFT OUTER JOIN ARTIST D ON B.ARTIST_NO = D.ARTIST_NO
                 LEFT OUTER JOIN LOT_SIZE E ON B.SALE_NO = E.SALE_NO AND B.LOT_NO = E.LOT_NO
                 LEFT OUTER JOIN CODE F ON F.GRP_ID = 'material' AND F.CD_ID = B.MATE_CD
                 LEFT OUTER JOIN CUST_INTE_LOT G ON
                     G.CUST_NO = #{cust_no} AND A.SALE_NO = G.SALE_NO AND B.LOT_NO = G.LOT_NO
                 LEFT OUTER JOIN CODE H ON H.GRP_ID = 'artwork_category' AND H.CD_ID = (SELECT  IFNULL(P_CD_ID, CD_ID) FROM CODE WHERE GRP_ID = 'artwork_category' AND CD_ID = (SELECT IFNULL(P_CD_ID, CD_ID) FROM CODE WHERE GRP_ID = 'artwork_category' AND CD_ID = B.CATE_CD))
        WHERE A.SALE_NO = #{sale_no}
            AND A.WWW_DISP_YN = 'Y'
            AND B.WWW_DISP_YN = 'Y'
            AND A.CLOSE_YN = 'N'
          -- AND B.CLOSE_YN = 'N'
        <if test='is_live !=null and is_live.equals("Y")'>
          AND A.SALE_KIND_CD IN ('main','plan','hongkong')
        </if>
        GROUP BY A.SALE_NO, B.LOT_NO
    </select>
    <select id="selectLotTagList" parameterType="CommonMap" resultType="CommonMap">
        select LOT_TAG from LOT where SALE_NO = #{sale_no} and LOT_TAG is not null
        group by LOT_TAG
    </select>
    <select id="selectCategories" parameterType="CommonMap" resultType="CommonMap">
        SELECT CD_ID
             , CD_NM
             , CD_NM_EN
        FROM CODE
        WHERE GRP_ID = 'artwork_category'
          AND CD_ID IN (SELECT  IFNULL(P_CD_ID, CD_ID) FROM CODE WHERE GRP_ID = 'artwork_category' AND CD_ID IN (SELECT IFNULL(P_CD_ID, CD_ID) FROM CODE WHERE GRP_ID = 'artwork_category' AND CD_ID IN (SELECT CATE_CD FROM LOT WHERE SALE_NO = #{sale_no})))
        ORDER BY DISP_ORD
    </select>
    <!--생년월일 성별 값 둘다 있는지 여부-->
    <select id="selectCustCheckRequired" parameterType="CommonMap" resultType="boolean">
        select
            case when CUST_KIND_CD = 'company' then true when SEX_CD IS NOT NULL and BORN_DT IS NOT null then true else false end checkRequired
        from
            CUST
        where
            CUST_NO = #{cust_no}
    </select>
    <!-- 자동 경매 insert -->
    <insert id="insertAutoBid" parameterType="CommonMap">
        INSERT INTO AUTO_BID_REQ(
             SALE_NO
            ,LOT_NO
            ,CUST_NO
            ,BID_KIND_CD
            ,REQ_DT
            ,BID_PRICE
            ,HP
            ,EMAIL
            ,MEMO
            ,EMP_NO
            ,ABORT_YN
            ,REG_DT
        )
        VALUES(
             #{sale_no}
            ,#{lot_no}
            ,#{cust_no}
            ,#{bid_kind_cd}
            ,#{bid_dt}
            ,#{bid_price}
            ,#{hp}
            ,#{email}
            ,#{memo}
            ,#{emp_no}
            ,'N'
            ,#{bid_dt}
        )
    </insert>
    <!-- 오프라인 경매 insert -->
    <insert id="insertOfflineBid" parameterType="CommonMap">
        INSERT INTO BID_OFFLINE
        (
            SALE_NO,
            LOT_NO,
            BID_NO,
            PADD_NO,
            BID_PRICE,
            BID_KIND_CD,
            BID_NOTICE,
            BID_NOTICE_EN,
            BID_DT,
            REG_DT
        ) VALUES (
                             #{sale_no},
                             #{lot_no},
                             #{bid_no},
                             #{padd_no},
                             #{bid_price},
                             #{bid_kind_cd},
                             #{bid_notice},
                             #{bid_notice_en},
                             #{bid_dt},
                             #{reg_dt}
         )
    </insert>
    <select id="selectMaxBid" parameterType="CommonMap" resultType="CommonMap">
        select
               SALE_NO,
               LOT_NO,
               max(BID_PRICE) BID_PRICE
        from BID
        where SALE_NO = #{sale_no} and LOT_NO = #{lot_no}
        group by SALE_NO, LOT_NO
    </select>


</mapper>