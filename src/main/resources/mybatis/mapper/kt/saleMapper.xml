<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.seoulauction.renewal.mapper.kt.SaleMapper">

	<select id="selectSale" resultType="commonMap" parameterType="commonMap">
		SELECT
			COUNT(*)	     ROW_CNT
		FROM CUST A , ACADEMY_REQ B , ACADEMY C
		WHERE A.CUST_NO = B.CUST_NO AND B.ACADEMY_NO = C.ACADEMY_NO AND A.CUST_NO = #{cust_no} AND B.DEL_YN = 'N'
	</select>

	<select id="selectSaleInfo" resultType="CommonMap"  parameterType="commonMap">
		SET SESSION group_concat_max_len = 1000000;
		select 		S.SALE_NO
		, S.SALE_KIND_CD
		, IF(S.SALE_TH_DSP_YN = 'N', '', S.SALE_TH) SALE_TH
		, IF(S.SALE_TH_DSP_YN = 'N', '', f_ordinal_number(S.SALE_TH)) SALE_TH_DSP
		, COLUMN_JSON(S.TITLE_BLOB) TITLE_JSON
		, COLUMN_GET(S.TITLE_BLOB, 'ko' AS CHAR) SALE_TITLE_KO
		, COLUMN_GET(S.TITLE_BLOB, 'en' AS CHAR) SALE_TITLE_EN
		, S.FROM_DT
		, S.TO_DT
		, S.CURR_CD
		, COLUMN_JSON(S.CMMT_BLOB) CMMT_JSON
		, COLUMN_JSON(S.PLACE_BLOB) PLACE_JSON
		, S.STAT_CD
		, now() as DB_NOW
		, concat('[',
		GROUP_CONCAT('{'
		, '"PLACE_JSON":', ifnull(CAST(COLUMN_JSON(SP.PLACE_BLOB) as char), ''), ', '
		, '"ADDR_JSON":', ifnull(CAST(COLUMN_JSON(SP.ADDR_BLOB) as char), ''), ', '
		, '"FROM_DT":"', SP.FROM_DT, '", '
		, '"TO_DT":"', SP.TO_DT, '", '
		, '"FROM_TIME":"', SP.FROM_TIME, '", '
		, '"TO_TIME":"', SP.TO_TIME, '", '
		, '"MAP_URL":"', ifnull(SP.MAP_URL, ''), '"'
		, '}')
		,']') as PREVIEW_JSON
		, (select MAX(L.TO_DT) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY L.SALE_NO) END_DT
		, (select MIN(COLUMN_GET(EXPE_PRICE_FROM_BLOB, 'KRW' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY L.SALE_NO) MIN_KRW_EXPE_PRICE
		, (select MAX(COLUMN_GET(EXPE_PRICE_TO_BLOB, 'KRW' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY L.SALE_NO) MAX_KRW_EXPE_PRICE
		, (select MIN(COLUMN_GET(EXPE_PRICE_FROM_BLOB, 'HKD' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY L.SALE_NO) MIN_HKD_EXPE_PRICE
		, (select MAX(COLUMN_GET(EXPE_PRICE_TO_BLOB, 'HKD' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY L.SALE_NO) MAX_HKD_EXPE_PRICE
		, (select MIN(COLUMN_GET(EXPE_PRICE_FROM_BLOB, 'USD' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY L.SALE_NO) MIN_USD_EXPE_PRICE
		, (select MAX(COLUMN_GET(EXPE_PRICE_TO_BLOB, 'USD' as integer)) from LOT L where L.SALE_NO = S.SALE_NO GROUP BY L.SALE_NO) MAX_USD_EXPE_PRICE
		, (<![CDATA[select MAX(SALE_NO) from SALE where STAT_CD = 'open' and FROM_DT <= now() and TO_DT >=now() and SALE_NO < #{sale_no} order by  FROM_DT]]>) AS PREV_SALE_NO
		, (<![CDATA[select MIN(SALE_NO) from SALE where STAT_CD = 'open' and FROM_DT <= now() and TO_DT >=now() and SALE_NO > #{sale_no} order by  FROM_DT]]>) AS NEXT_SALE_NO
		, (<![CDATA[select LC.CLOSE_YN from LOT LC where LC.SALE_NO = S.SALE_NO AND LC.LOT_NO = (SELECT MAX(LC1.LOT_NO) FROM LOT LC1 WHERE LC1.SALE_NO = S.SALE_NO AND LC1.STAT_CD <> 'reentry')]]>) AS CLOSE_YN
		, SI.FILE_PATH as SALE_IMG_PATH
		, SI.FILE_NAME as SALE_IMG_NAME
		, S.AUTO_BID_REQ_CLOSE_DT
		, COLUMN_JSON(S.NOTICE_BLOB) NOTICE_JSON
		, COLUMN_JSON(S.NOTICE_DTL_BLOB) NOTICE_DTL_JSON
		, S.SALE_OUTSIDE_YN
		, S.LIVE_BID_YN
		, S.LIVE_BID_DT
		, if(S.SALE_KIND_CD in('plan', 'main', 'hongkong') and S.TO_DT &lt; current_timestamp - interval 5 year, 'Y', 'N') as IS_OLD_SALE
		, BW.WRITE_NO <!-- 공지사항 불러오기 -->
		from SALE S
		left outer join BBS_WRITE BW on S.SALE_NO = BW.SALE_NO AND BBS_ID = 'notice'
		left outer join SALE_PREV SP on S.SALE_NO = SP.SALE_NO
		left outer join SALE_IMG SI
		on SI.SALE_NO = S.SALE_NO
		and SI.IMG_NO = (select A.IMG_NO from SALE_IMG A where A.SALE_NO = S.SALE_NO order by A.IMG_NO limit 1)
		where S.SALE_NO = #{sale_no} <!-- S.STAT_CD = 'open' and  (YDH수정. 2016.08.25 Upcomming에 세일경매 보여주지 않음. stat_cd = 'open'이면 current에도 경매정보 보여짐.)-->
		group by S.SALE_NO
	</select>
	<select id="selectExchRateList" resultType="CommonMap"  parameterType="commonMap">
		select 	EX.*
		from 	SALE_EXCH_RATE EX
		where	EX.SALE_NO = #{sale_no}
	</select>
	<select id="selectLotInfo" resultType="CommonMap"  parameterType="commonMap">
		select 	L.SALE_NO, L.LOT_NO, L.STAT_CD, L.FROM_DT, L.TO_DT
		, L.TO_DT AS SALE_TO_DT
		, L.START_PRICE
		, L.GROW_PRICE
		, COLUMN_JSON(L.TITLE_BLOB) TITLE_JSON
		, COLUMN_JSON(L.STITLE_BLOB) STITLE_JSON
		, COLUMN_GET(L.TITLE_BLOB, 'ko' as CHAR) TITLE_KO_TXT
		, COLUMN_GET(L.TITLE_BLOB, 'en' as CHAR) TITLE_EN_TXT
		, L.EDITION
		, COLUMN_JSON(L.MAKE_YEAR_BLOB) MAKE_YEAR_JSON
		, TRIM(COLUMN_GET(L.MAKE_YEAR_BLOB, 'ko' as char)) as MAKE_YEAR_KO
		, COLUMN_JSON(L.SIGN_INFO_BLOB) SIGN_INFO_JSON
		, COLUMN_JSON(L.COND_RPT_BLOB) COND_RPT_JSON   # YDH. 컨디션리포트용 데이터 컬럼 추가.
		, COLUMN_JSON(L.LITE_INFO_BLOB) LITE_INFO_JSON
		, COLUMN_JSON(L.EXHI_INFO_BLOB) EXHI_INFO_JSON   # YDH. 전시정보 데이터 컬럼 추가.
		, COLUMN_JSON(L.PROV_INFO_BLOB) PROV_INFO_JSON   # YDH. 소장정보 데이터 컬럼 추가.
		, COLUMN_JSON(L.ETC_INFO_BLOB) ETC_INFO_JSON   # YDH. 기타정보 데이터 컬럼 추가.
		, COLUMN_JSON(L.CMMT_BLOB) CMMT_JSON
		, COLUMN_JSON(AT.ARTIST_NAME_BLOB) ARTIST_NAME_JSON
		, COLUMN_GET(AT.ARTIST_NAME_BLOB, 'ko' as CHAR) ARTIST_NAME_KO_TXT
		, COLUMN_GET(AT.ARTIST_NAME_BLOB, 'en' as CHAR) ARTIST_NAME_EN_TXT
		, AT.BORN_YEAR
		, AT.DIE_YEAR
		, CD.CD_NM as MATE_NM
		, CD.CD_NM_EN as MATE_NM_EN
		, CD.CD_NM_CN as MATE_NM_CN
		, LI.FILE_PATH as LOT_IMG_PATH
		, LI.FILE_NAME as LOT_IMG_NAME
		,  IFNULL(BD.LAST_PRICE, L.DISP_SOLD_PRICE) AS LAST_PRICE
		, CASE WHEN '${action_user_no}' != '' AND BD.LAST_CUST_NO = '${action_user_no}' THEN BD.LAST_CUST_ID
		ELSE concat(substr(BD.LAST_CUST_ID, 1, 2), '***') END AS LAST_CUST_ID
		, ifnull(BD.SOLD_YN, 'N') as SOLD_YN
		, if(now() > L.TO_DT, 'Y', 'N') as END_YN
		, ifnull(BD.BID_CNT, 0) as BID_CNT
		, COLUMN_JSON(L.EXPE_PRICE_FROM_BLOB) EXPE_PRICE_FROM_JSON
		, COLUMN_JSON(L.EXPE_PRICE_TO_BLOB) EXPE_PRICE_TO_JSON
		, CONCAT('['
		, GROUP_CONCAT('{',
		'"UNIT_CD":"', ifnull(LS.UNIT_CD, 'cm') ,'",',
		'"SIZE1":', ifnull(LS.SIZE1,0) ,',',
		'"SIZE2":', ifnull(LS.SIZE2,0) ,',',
		'"SIZE3":', ifnull(LS.SIZE3,0) ,',',
		'"CANVAS":', ifnull(LS.CANVAS,0) ,',',
		'"DIAMETER_YN":"', ifnull(LS.DIAMETER_YN,'N') ,'",',
		'"PREFIX":"', ifnull(LS.PREFIX,'') ,'",',
		'"SUFFIX":"', ifnull(LS.SUFFIX,'') ,'",',
		'"MIX_CD":"', ifnull(LS.MIX_CD,'h') ,'",',
		'"CANVAS_EXT_YN":"', ifnull(LS.CANVAS_EXT_YN,'N') , '"',
		'}')
		,']') AS LOT_SIZE_JSON
		, GROUP_CONCAT(ifnull(LS.PREFIX,''),' ', CASE WHEN LS.DIAMETER_YN = 'Y' THEN 'ø' ELSE '' END,
		ifnull(truncate(LS.SIZE1, 1),''), CASE WHEN LS.SIZE1 IS NULL THEN '' ELSE '×' END,
		ifnull(truncate(LS.SIZE2, 1),''), CASE WHEN LS.SIZE3 IS NULL THEN '' ELSE '×' END,
		ifnull(truncate(LS.SIZE3, 1),''), case when LS.MIX_CD = 'height' then '(h)' else '' end,  'cm', case when LS.SUFFIX is null then '' else ' (' end, ifnull(LS.SUFFIX,''), case when LS.SUFFIX is null then '' else ')' end, CHAR(10))
		AS LOT_SIZE_STRING
		, COLUMN_JSON(AT.PROFILE_BLOB) PROFILE_JSON
		, LI.FILE_PATH as LOT_IMG_PATH
		, LI.FILE_NAME as LOT_IMG_NAME
		, (SELECT IFNULL(MAX(LOT_NO), 0) FROM LOT WHERE SALE_NO = L.SALE_NO AND LOT_NO &lt; L.LOT_NO  AND STAT_CD &lt;&gt; 'reentry') AS PREV_LOT_NO   # YDH. 이전 LOT NO.
		, (SELECT IFNULL(MIN(LOT_NO), 0) FROM LOT WHERE SALE_NO = L.SALE_NO AND LOT_NO &gt; L.LOT_NO  AND STAT_CD &lt;&gt; 'reentry') AS NEXT_LOT_NO   # YDH. 다음 LOT NO.
		, SA.ARTWORK_NOS
		, L.IMG_DISP_YN
		, L.EXPE_PRICE_INQ_YN
		, now() as DB_NOW
		, IFNULL(CR.CONFIRM_YN, 'N') AS CR_INTE_LOT
		, IFNULL(IL.DEL_YN, 'Y') AS INTE_LOT_DEL
		, (select count(*) from BID B where B.SALE_NO = L.SALE_NO and B.LOT_NO = L.LOT_NO and B.CUST_NO = '${action_user_no}') MY_BID_CNT
		, (select count(*) from BID B where B.SALE_NO = L.SALE_NO and B.CUST_NO = '${action_user_no}') MY_BID_SALE_CNT
		, (select count(*) from AUTO_BID_REQ B where B.SALE_NO = L.SALE_NO and B.CUST_NO = '${action_user_no}') MY_BID_AUTO_CNT
		, L.WINE_YN
		, IFNULL(L.FRAME_CD, 'none') AS FRAME_CD
		, IFNULL(L.GUARANTEE_YN, 'Y') GUARANTEE_YN
		, L.ZEROBASE_PRICE_YN
		from 	LOT L
		left outer join (<include refid="com.seoulauction.renewal.mapper.kt.CommonMapper.saleLastBidInfos" />) BD on BD.SALE_NO = L.SALE_NO and BD.LOT_NO = L.LOT_NO
		left outer join ARTIST AT
		on AT.ARTIST_NO = L.ARTIST_NO
		left outer join CODE CD
		on CD.grp_id = 'material' and CD.CD_ID = L.MATE_CD
		left outer join LOT_IMG LI
		on LI.SALE_NO = L.SALE_NO and LI.LOT_NO = L.LOT_NO
		and LI.IMG_NO = (select A.IMG_NO from LOT_IMG A where A.SALE_NO = L.SALE_NO and A.LOT_NO = L.LOT_NO order by A.DISP_ORD limit 1)
		left outer join LOT_SIZE LS ON LS.SALE_NO = L.SALE_NO AND LS.LOT_NO = L.LOT_NO
		LEFT OUTER JOIN (SELECT SALE_NO, LOT_NO, GROUP_CONCAT(ARTWORK_NO) ARTWORK_NOS FROM SALE_ARTWORK WHERE SALE_NO = #{sale_no} AND LOT_NO = #{lot_no}) SA
		ON L.SALE_NO = SA.SALE_NO AND L.LOT_NO = SA.LOT_NO
		left outer join CUST_CR_LOT CR ON L.SALE_NO = CR.SALE_NO AND L.LOT_NO = CR.LOT_NO AND CR.DEL_YN = 'N' AND CR.CUST_NO = #{action_user_no}
		left outer join CUST_INTE_LOT IL ON L.SALE_NO = IL.SALE_NO AND L.LOT_NO = IL.LOT_NO AND IL.DEL_YN = 'N' AND IL.CUST_NO = #{action_user_no}
		where 	L.SALE_NO = #{sale_no}
		and L.LOT_NO = #{lot_no}
		group by L.SALE_NO, L.LOT_NO
	</select>
	<select id="selectLotImages" resultType="CommonMap"  parameterType="commonMap">
		select * from LOT_IMG LI
		where	LI.SALE_NO = #{sale_no}
		<if test="lot_no != null">
			and LI.LOT_NO = #{lot_no}
		</if>
		order by LI.LOT_NO, LI.DISP_ORD
	</select>
	<select id="selectSaleLotImages" resultType="CommonMap"  parameterType="commonMap">
		select
			b.SALE_NO SALE_NO,
			b.LOT_NO LOT_NO,
			c.FILE_PATH FILE_PATH,
			c.FILE_NAME FILE_NAME
		from lot b
		inner join lot_img c on b.SALE_NO = c.SALE_NO and b.LOT_NO = c.LOT_NO and c.DISP_ORD = 1
		where b.SALE_NO = #{sale_no} and b.CLOSE_YN = 'N'
		order by b.LOT_NO asc
	</select>
</mapper>